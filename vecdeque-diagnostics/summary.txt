--------------------------------------------------------------------------------
Commit Hash: 1936442
--------------------------------------------------------------------------------
========================
ERROR: push_front-L524-0
========================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:524:13
    |
524 |             self.buffer_write(tail, value);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved


src/vec_deque.rs
514:                 //#[stable(feature = "rust1", since = "1.0.0")]
515:        fix>     pub fn push_front(&mut self, value: T) {
516:                     if self.is_full() {
517:                         self.grow();
518:                     }
519:
520:                     let tail = self.tail;
521:                     self.tail = self.wrap_sub(tail, 1);
522:                     let tail = self.tail;
523:                     unsafe {
524: error>                  self.buffer_write(tail, value);
525:                     }
526:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.fluxc
Fix Information:
  Fix Line: 515
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: self needs refining
  Certainty: True

=======================
ERROR: push_back-L547-0
=======================
Error Message: error[E0999]: assignment might be unsafe
   --> src/vec_deque.rs:547:9
    |
547 |         self.head = self.wrap_add(self.head, 1);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


src/vec_deque.rs
540:                 //#[stable(feature = "rust1", since = "1.0.0")]
541:        fix>     pub fn push_back(&mut self, value: T) {
542:                     if self.is_full() {
543:                         self.grow();
544:                     }
545:
546:                     let head = self.head;
547: error>              self.head = self.wrap_add(self.head, 1);
548:                     unsafe { self.buffer_write(head, value) }
549:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.simp.fluxc
Fix Information:
  Fix Line: 541
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: self needs refining
  Certainty: True

=======================
ERROR: push_back-L548-0
=======================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:548:18
    |
548 |         unsafe { self.buffer_write(head, value) }
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved


src/vec_deque.rs
540:                 //#[stable(feature = "rust1", since = "1.0.0")]
541:        fix>     pub fn push_back(&mut self, value: T) {
542:                     if self.is_full() {
543:                         self.grow();
544:                     }
545:
546:                     let head = self.head;
547:                     self.head = self.wrap_add(self.head, 1);
548: error>              unsafe { self.buffer_write(head, value) }
549:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.simp.fluxc
Fix Information:
  Fix Line: 541
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: self needs refining
  Certainty: True

========================
ERROR: push_front-L521-0
========================
Error Message: error[E0999]: assignment might be unsafe
   --> src/vec_deque.rs:521:9
    |
521 |         self.tail = self.wrap_sub(tail, 1);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


src/vec_deque.rs
514:                 //#[stable(feature = "rust1", since = "1.0.0")]
515:        fix>     pub fn push_front(&mut self, value: T) {
516:                     if self.is_full() {
517:                         self.grow();
518:                     }
519:
520:                     let tail = self.tail;
521: error>              self.tail = self.wrap_sub(tail, 1);
522:                     let tail = self.tail;
523:                     unsafe {
524:                         self.buffer_write(tail, value);
525:                     }
526:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/1936442/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.fluxc
Fix Information:
  Fix Line: 515
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: self needs refining
  Certainty: True

--------------------------------------------------------------------------------
Commit Hash: 32162d8
--------------------------------------------------------------------------------
===========================
ERROR: with_capacity-L249-0
===========================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:249:9
    |
249 |         Self::with_capacity_in(capacity, Global)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved
    |
note: this is the condition that cannot be proved
   --> src/vec_deque.rs:279:37
    |
279 |     #[flux::sig(fn (capacity: usize{capacity < MAXIMUM_ZST_CAPACITY && capacity > 1}, alloc: A) -> VecDeque<T, A>{v: v.head == 0 && v.tai...
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


src/vec_deque.rs
247:                 #[must_use]
248:        fix>     pub fn with_capacity(capacity: usize) -> VecDeque<T> {
249: error>              Self::with_capacity_in(capacity, Global)
250:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#0}-with_capacity.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#2}-with_capacity.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#0}-with_capacity.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#2}-with_capacity.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#2}-with_capacity.simp.fluxc
Fix Information:
  Fix Line: 248
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: capacity < MAXIMUM_ZST_CAPACITY
  Certainty: True

===========================
ERROR: with_capacity-L249-1
===========================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:249:9
    |
249 |         Self::with_capacity_in(capacity, Global)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved
    |
note: this is the condition that cannot be proved
   --> src/vec_deque.rs:279:72
    |
279 |     #[flux::sig(fn (capacity: usize{capacity < MAXIMUM_ZST_CAPACITY && capacity > 1}, alloc: A) -> VecDeque<T, A>{v: v.head == 0 && v.tai...
    |                                                                        ^^^^^^^^^^^^


src/vec_deque.rs
247:                 #[must_use]
248:        fix>     pub fn with_capacity(capacity: usize) -> VecDeque<T> {
249: error>              Self::with_capacity_in(capacity, Global)
250:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#0}-with_capacity.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#2}-with_capacity.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#0}-with_capacity.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#2}-with_capacity.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#2}-with_capacity.simp.fluxc
Fix Information:
  Fix Line: 248
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: capacity > 1
  Certainty: True

==================
ERROR: grow-L565-2
==================
Error Message: error[E0999]: type invariant may not hold (when place is folded)
   --> src/vec_deque.rs:565:13
    |
565 |             self.handle_capacity_increase(old_cap);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


src/vec_deque.rs
553:                 #[inline(never)]
554:        fix>     fn grow(&mut self) {
555:                     // Extend or possibly remove this assertion when valid use-cases for growing the
556:                     // buffer without it being full emerge
557:                     debug_assert!(self.is_full());
558:                     let old_cap = self.cap();
559:                     self.buf.reserve_exact(old_cap, old_cap);
560:                     // let _ = lem_power_two(old_cap);
561:                     let new_cap = self.cap();
562:                     // TODO: Uncomment
563:                     assert(new_cap == old_cap * 2);
564:                     unsafe {
565: error>                  self.handle_capacity_increase(old_cap);
566:                     }
567:                     debug_assert!(!self.is_full());
568:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#2}-needs_to_grow.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#2}-needs_to_grow.fluxc
Fix Information:
  Fix Line: 554
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: self needs to be refined
  Certainty: True

==================
ERROR: grow-L563-0
==================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:563:9
    |
563 |         assert(new_cap == old_cap * 2);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved
    |
note: this is the condition that cannot be proved
   --> src/vec_deque.rs:598:21
    |
598 | #[flux::sig(fn(bool[true]))]
    |                     ^^^^


src/vec_deque.rs
553:                 #[inline(never)]
554:        fix>     fn grow(&mut self) {
555:                     // Extend or possibly remove this assertion when valid use-cases for growing the
556:                     // buffer without it being full emerge
557:                     debug_assert!(self.is_full());
558:                     let old_cap = self.cap();
559:                     self.buf.reserve_exact(old_cap, old_cap);
560:                     // let _ = lem_power_two(old_cap);
561:                     let new_cap = self.cap();
562:                     // TODO: Uncomment
563: error>              assert(new_cap == old_cap * 2);
564:                     unsafe {
565:                         self.handle_capacity_increase(old_cap);
566:                     }
567:                     debug_assert!(!self.is_full());
568:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#2}-needs_to_grow.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#2}-needs_to_grow.fluxc
Fix Information:
  Fix Line: 554
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: self needs to be refined
  Certainty: True

========================
ERROR: push_front-L520-0
========================
Error Message: error[E0999]: assignment might be unsafe
   --> src/vec_deque.rs:520:9
    |
520 |         self.tail = self.wrap_sub(tail, 1);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


src/vec_deque.rs
513:                 //#[stable(feature = "rust1", since = "1.0.0")]
514:                 pub fn push_front(&mut self, value: T) {
515:                     if self.is_full() {
516:                         self.grow();
517:                     }
518:
519:                     let tail = self.tail;
520: error> fix>         self.tail = self.wrap_sub(tail, 1);
521:                     let tail = self.tail;
522:                     unsafe {
523:                         self.buffer_write(tail, value);
524:                     }
525:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.fluxc
Fix Information:
  Fix Line: 520
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: wrap_sub needs to preserve vec_deque invariant
  Certainty: True

=======================
ERROR: push_back-L547-0
=======================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:547:18
    |
547 |         unsafe { self.buffer_write(head, value) }
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved


src/vec_deque.rs
539:                 //#[stable(feature = "rust1", since = "1.0.0")]
540:                 pub fn push_back(&mut self, value: T) {
541:                     if self.is_full() {
542:                         self.grow();
543:                     }
544:
545:                     let head = self.head;
546:        fix>         self.head = self.wrap_add(self.head, 1);
547: error>              unsafe { self.buffer_write(head, value) }
548:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.simp.fluxc
Fix Information:
  Fix Line: 546
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: wrap_add needs to preserve vec_deque invariant
  Certainty: True

========================
ERROR: push_front-L523-0
========================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:523:13
    |
523 |             self.buffer_write(tail, value);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved


src/vec_deque.rs
513:                 //#[stable(feature = "rust1", since = "1.0.0")]
514:                 pub fn push_front(&mut self, value: T) {
515:                     if self.is_full() {
516:                         self.grow();
517:                     }
518:
519:                     let tail = self.tail;
520:        fix>         self.tail = self.wrap_sub(tail, 1);
521:                     let tail = self.tail;
522:                     unsafe {
523: error>                  self.buffer_write(tail, value);
524:                     }
525:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_front.fluxc
Fix Information:
  Fix Line: 520
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: wrap_sub needs to preserve vec_deque invariant
  Certainty: True

=======================
ERROR: push_back-L546-0
=======================
Error Message: error[E0999]: assignment might be unsafe
   --> src/vec_deque.rs:546:9
    |
546 |         self.head = self.wrap_add(self.head, 1);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


src/vec_deque.rs
539:                 //#[stable(feature = "rust1", since = "1.0.0")]
540:                 pub fn push_back(&mut self, value: T) {
541:                     if self.is_full() {
542:                         self.grow();
543:                     }
544:
545:                     let head = self.head;
546: error> fix>         self.head = self.wrap_add(self.head, 1);
547:                     unsafe { self.buffer_write(head, value) }
548:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-push_back.simp.fluxc
Fix Information:
  Fix Line: 546
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: wrap_add needs to preserve vec_deque refinement
  Certainty: True

==================
ERROR: grow-L565-1
==================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:565:13
    |
565 |             self.handle_capacity_increase(old_cap);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved
    |
note: this is the condition that cannot be proved
   --> src/vec_deque.rs:171:93
    |
171 |     #[flux::sig(fn (self: &strg VecDeque<T,A>[@s], old_capacity: usize{v: v * 2 <= s.cap && s.tail < v}) ensures self: VecDeque<T, A>)]
    |                                                                                             ^^^^^^^^^^


src/vec_deque.rs
553:                 #[inline(never)]
554:        fix>     fn grow(&mut self) {
555:                     // Extend or possibly remove this assertion when valid use-cases for growing the
556:                     // buffer without it being full emerge
557:                     debug_assert!(self.is_full());
558:                     let old_cap = self.cap();
559:                     self.buf.reserve_exact(old_cap, old_cap);
560:                     // let _ = lem_power_two(old_cap);
561:                     let new_cap = self.cap();
562:                     // TODO: Uncomment
563:                     assert(new_cap == old_cap * 2);
564:                     unsafe {
565: error>                  self.handle_capacity_increase(old_cap);
566:                     }
567:                     debug_assert!(!self.is_full());
568:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#2}-needs_to_grow.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#2}-needs_to_grow.fluxc
Fix Information:
  Fix Line: 554
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: self needs to be refined
  Certainty: True

==================
ERROR: grow-L565-0
==================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:565:13
    |
565 |             self.handle_capacity_increase(old_cap);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved
    |
note: this is the condition that cannot be proved
   --> src/vec_deque.rs:171:75
    |
171 |     #[flux::sig(fn (self: &strg VecDeque<T,A>[@s], old_capacity: usize{v: v * 2 <= s.cap && s.tail < v}) ensures self: VecDeque<T, A>)]
    |                                                                           ^^^^^^^^^^^^^^


src/vec_deque.rs
553:                 #[inline(never)]
554:        fix>     fn grow(&mut self) {
555:                     // Extend or possibly remove this assertion when valid use-cases for growing the
556:                     // buffer without it being full emerge
557:                     debug_assert!(self.is_full());
558:                     let old_cap = self.cap();
559:                     self.buf.reserve_exact(old_cap, old_cap);
560:                     // let _ = lem_power_two(old_cap);
561:                     let new_cap = self.cap();
562:                     // TODO: Uncomment
563:                     assert(new_cap == old_cap * 2);
564:                     unsafe {
565: error>                  self.handle_capacity_increase(old_cap);
566:                     }
567:                     debug_assert!(!self.is_full());
568:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#2}-needs_to_grow.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#2}-needs_to_grow.fluxc
Fix Information:
  Fix Line: 554
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: self needs to be refined
  Certainty: True

==================
ERROR: grow-L559-0
==================
Error Message: error[E0999]: type invariant may not hold (when place is folded)
   --> src/vec_deque.rs:559:9
    |
559 |         self.buf.reserve_exact(old_cap, old_cap);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


src/vec_deque.rs
553:                 #[inline(never)]
554:        fix>     fn grow(&mut self) {
555:                     // Extend or possibly remove this assertion when valid use-cases for growing the
556:                     // buffer without it being full emerge
557:                     debug_assert!(self.is_full());
558:                     let old_cap = self.cap();
559: error>              self.buf.reserve_exact(old_cap, old_cap);
560:                     // let _ = lem_power_two(old_cap);
561:                     let new_cap = self.cap();
562:                     // TODO: Uncomment
563:                     assert(new_cap == old_cap * 2);
564:                     unsafe {
565:                         self.handle_capacity_increase(old_cap);
566:                     }
567:                     debug_assert!(!self.is_full());
568:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#2}-needs_to_grow.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-grow.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.raw_vec-{impl#2}-needs_to_grow.fluxc
Fix Information:
  Fix Line: 554
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: self needs to be refined
  Certainty: True

==============================
ERROR: with_capacity_in-L292-0
==============================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:292:5
    |
292 |     }
    |     ^ a postcondition cannot be proved
    |
note: this is the condition that cannot be proved
   --> src/vec_deque.rs:279:148
    |
279 | ...oc: A) -> VecDeque<T, A>{v: v.head == 0 && v.tail == 0 && capacity <= v.cap})]
    |                                                              ^^^^^^^^^^^^^^^^^


src/vec_deque.rs
279:                 #[flux::sig(fn (capacity: usize{capacity < MAXIMUM_ZST_CAPACITY && capacity > 1}, alloc: A) -> VecDeque<T, A>{v: v.head == 0 && v.tail == 0 && capacity <= v.cap})]
280:                 fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {
281:                     // FLUX-TODO: same as MAXIMUM_ZST_CAPACITY?: assert!(capacity < 1_usize << usize::BITS - 1, "capacity overflow");
282:                     // TODO: Uncomment
283:                     // assert(capacity < MAXIMUM_ZST_CAPACITY);
284:                     // +1 since the ringbuffer always leaves one space empty
285:        fix>         let cap = real_capacity(capacity);
286:
287:                     VecDeque {
288:                         tail: 0,
289:                         head: 0,
290:                         buf: RawVec::with_capacity_in(cap, alloc),
291:                     }
292: error>          }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-with_capacity_in.smt2
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-with_capacity_in.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-with_capacity_in.simp.fluxc
Fix Information:
  Fix Line: 285
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: real_capacity(capacity) >= capacity
  Certainty: True

=================
ERROR: len-L417-0
=================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:417:9
    |
417 |         count(self.tail, self.head, self.cap())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a postcondition cannot be proved
    |
note: this is the condition that cannot be proved
   --> src/vec_deque.rs:415:56
    |
415 |     #[flux::sig(fn (&VecDeque<T,A>[@self]) -> usize{v: v < self.cap})]
    |                                                        ^^^^^^^^^^^^


src/vec_deque.rs
415:                 #[flux::sig(fn (&VecDeque<T,A>[@self]) -> usize{v: v < self.cap})]
416:                 pub fn len(&self) -> usize {
417: error> fix>         count(self.tail, self.head, self.cap())
418:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-len.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-len.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/32162d8/all_constraints/vecdeque.vec_deque-{impl#3}-len.smt2
Fix Information:
  Fix Line: 417
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: count(_, _, cap) < cap
  Certainty: True

--------------------------------------------------------------------------------
Commit Hash: 456f9a5
--------------------------------------------------------------------------------
=================
ERROR: len-L418-0
=================
Error Message: error[E0999]: refinement type error
   --> src/vec_deque.rs:418:9
    |
418 |         count(self.tail, self.head, self.cap())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a postcondition cannot be proved
    |
note: this is the condition that cannot be proved
   --> src/vec_deque.rs:416:56
    |
416 |     #[flux::sig(fn (&VecDeque<T,A>[@self]) -> usize{v: v < self.cap})]
    |                                                        ^^^^^^^^^^^^


src/vec_deque.rs
416:                 #[flux::sig(fn (&VecDeque<T,A>[@self]) -> usize{v: v < self.cap})]
417:                 pub fn len(&self) -> usize {
418: error> fix>         count(self.tail, self.head, self.cap())
419:                 }

Constraint files:
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/456f9a5/all_constraints/vecdeque.vec_deque-{impl#3}-len.simp.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/456f9a5/all_constraints/vecdeque.vec_deque-{impl#3}-len.fluxc
  /Users/cole/git/flux-diagnose/vecdeque-diagnostics/456f9a5/all_constraints/vecdeque.vec_deque-{impl#3}-len.smt2
Fix Information:
  Fix Line: 418
  Helpful Message: n
  Problem Description: 2
  Fix Type: additional_refinement
  Fix Description: count reft is <= size instead of < size
  Certainty: True


{
    "error": {
        "message": "refinement type error",
        "file": "src/collections/ring_buffer.rs",
        "row": 114,
        "col": 13,
        "raw": "error[E0999]: refinement type error\n   --> kernel/src/collections/ring_buffer.rs:114:13\n    |\n114 |             true\n    |             ^^^^ a postcondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> kernel/src/collections/ring_buffer.rs:99:22\n    |\n99  | /                      if full(old) {\n100 | |                          old == new\n101 | |                      } else {\n102 | |                          new.ring_len == old.ring_len && new.hd == next_hd(old)\n103 | |                          && new.tl == next_tl(old)\n104 | |                      }\n    | |______________________^\n\n",
        "function_context": {
            "start": 97,
            "end": 116,
            "name": "enqueue",
            "constraint_files": [
                "/Users/cole/git/flux-diagnose/ringbuffer-diagnostics/65478d906/all_constraints/kernel.collections-ring_buffer-{impl#1}-enqueue.simp.sub.fluxc",
                "/Users/cole/git/flux-diagnose/ringbuffer-diagnostics/65478d906/all_constraints/kernel.collections-ring_buffer-{impl#1}-enqueue.sub.fluxc",
                "/Users/cole/git/flux-diagnose/ringbuffer-diagnostics/65478d906/all_constraints/kernel.collections-ring_buffer-{impl#1}-enqueue.simp.fluxc",
                "/Users/cole/git/flux-diagnose/ringbuffer-diagnostics/65478d906/all_constraints/kernel.collections-ring_buffer-{impl#1}-enqueue.fluxc",
                "/Users/cole/git/flux-diagnose/ringbuffer-diagnostics/65478d906/all_constraints/kernel.collections-ring_buffer-{impl#1}-enqueue.smt2"
            ],
            "rendered_context": "97:     #[flux_rs::sig(fn(self: &strg RingBuffer<T>[@old], val: T) -> bool[!full(old)]\n98:                    ensures self: RingBuffer<T>{new :\n99:                      if full(old) {\n100:                          old == new\n101:                      } else {\n102:                          new.ring_len == old.ring_len && new.hd == next_hd(old)\n103:                          && new.tl == next_tl(old)\n104:                      }\n105:                    }\n106:     )]\n107:     fn enqueue(&mut self, val: T) -> bool {\n108:         if self.is_full() {\n109:             // Incrementing tail will overwrite head\n110:             false\n111:         } else {\n112:             self.ring[self.tail] = val;\n113:             self.tail = (self.tail + 1) % self.ring.len();\n114:             true\n115:         }\n116:     }\n"
        },
        "unique_name": "enqueue-L114-0"
    },
    "fix": {
        "fix_line": 102,
        "helpful_message": "n",
        "problem_description": "3",
        "fix_description": {
            "fix_type": "new_refinement",
            "description": "new.hd == old.hd"
        },
        "certainty": true,
        "seen_before": false,
        "rendered_fix_context": "99:                             if full(old) {\n100:                                 old == new\n101:                             } else {\n102: error->                         new.ring_len == old.ring_len && new.hd == next_hd(old)\n103:                                 && new.tl == next_tl(old)\n104:                             }\n105:                           }\n"
    }
}
{
  "5c538c8": [
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:126:9\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:30:47\n    |\n30  | #[flux::alias(type Size = usize{v: pow2(v) && 1<=v })]\n    |                                               ^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"1 \u2264 a4\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:126:46: 126:56 (#0)))\"}]\n   --> src/vec_deque.rs:126:9\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:126:46\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |                                              ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 126,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:126:9\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:30:47\n    |\n30  | #[flux::alias(type Size = usize{v: pow2(v) && 1<=v })]\n    |                                               ^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"1 \u2264 a4\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:126:46: 126:56 (#0)))\"}]\n   --> src/vec_deque.rs:126:9\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:126:46\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |                                              ^^^^^^^^^^\n\n",
        "predicate": "1 \u2264 a4",
        "blamed_variable": "Some(a4)",
        "related_variables": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:126:46: 126:56 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 124,
          "end": 127,
          "name": "wrap_add",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:124-127):\nFunction name: wrap_add\n---------------------------------------------------------------------------------------------\n 124:            #[inline]\n 125:            fn wrap_add(&self, idx: usize, addend: usize) -> usize {\n 126: error>         wrap_index(idx.wrapping_add(addend), self.cap())\n 127:            }\n"
        },
        "unique_name": "wrap_add-L126-1"
      },
      "fix": {
        "certainty": true,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "cap needs 1 >= on output"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:126:46: 126:56 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/wrap_add-L126-1/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:409:9\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:30:40\n    |\n30  | #[flux::alias(type Size = usize{v: pow2(v) && 1<=v })]\n    |                                        ^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"pow2(a1)\"\n              blamed variable: \"Some(a1)\"\n              related variables: [{\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:409:37: 409:47 (#0)))\"}]\n   --> src/vec_deque.rs:409:9\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:409:37\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |                                     ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 409,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:409:9\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:30:40\n    |\n30  | #[flux::alias(type Size = usize{v: pow2(v) && 1<=v })]\n    |                                        ^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"pow2(a1)\"\n              blamed variable: \"Some(a1)\"\n              related variables: [{\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:409:37: 409:47 (#0)))\"}]\n   --> src/vec_deque.rs:409:9\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:409:37\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |                                     ^^^^^^^^^^\n\n",
        "predicate": "pow2(a1)",
        "blamed_variable": "Some(a1)",
        "related_variables": [
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:409:37: 409:47 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 407,
          "end": 410,
          "name": "len",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:407-410):\nFunction name: len\n---------------------------------------------------------------------------------------------\n 407:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 408:            pub fn len(&self) -> usize {\n 409: error>         count(self.tail, self.head, self.cap())\n 410:            }\n"
        },
        "unique_name": "len-L409-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "self.cap() needs pow2 on output"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:409:37: 409:47 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/len-L409-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:387:13\n    |\n387 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a4 + 1 + a5 - a4 + 1 = a6.2\"\n              blamed variable: \"Some(a6)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:379:23: 379:33 (#0)))\"}, {\"name\": \"a6\", \"depth\": 6, \"origin\": \"No provenance\"}, {\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:380:24: 380:34 (#0)))\"}, {\"name\": \"a5\", \"depth\": 5, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:381:23: 381:66 (#0)))\"}]\n   --> src/vec_deque.rs:387:13\n    |\n387 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:379:23\n    |\n379 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:380:24\n    |\n380 |         let used_cap = self.len() + 1;\n    |                        ^^^^^^^^^^\nnote: related variable `a5 (depth 5)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:381:23\n    |\n381 |         let new_cap = new_capacity(old_cap, used_cap, additional);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 387,
        "col": 13,
        "raw1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:387:13\n    |\n387 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a4 + 1 + a5 - a4 + 1 = a6.2\"\n              blamed variable: \"Some(a6)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:379:23: 379:33 (#0)))\"}, {\"name\": \"a6\", \"depth\": 6, \"origin\": \"No provenance\"}, {\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:380:24: 380:34 (#0)))\"}, {\"name\": \"a5\", \"depth\": 5, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:381:23: 381:66 (#0)))\"}]\n   --> src/vec_deque.rs:387:13\n    |\n387 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:379:23\n    |\n379 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:380:24\n    |\n380 |         let used_cap = self.len() + 1;\n    |                        ^^^^^^^^^^\nnote: related variable `a5 (depth 5)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:381:23\n    |\n381 |         let new_cap = new_capacity(old_cap, used_cap, additional);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a4 + 1 + a5 - a4 + 1 = a6.2",
        "blamed_variable": "Some(a6)",
        "related_variables": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:379:23: 379:33 (#0)))"
          },
          {
            "name": "a6",
            "depth": 6,
            "origin": "No provenance"
          },
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:380:24: 380:34 (#0)))"
          },
          {
            "name": "a5",
            "depth": 5,
            "origin": "(CallReturn, Some(src/vec_deque.rs:381:23: 381:66 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 377,
          "end": 393,
          "name": "reserve",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:377-393):\nFunction name: reserve\n---------------------------------------------------------------------------------------------\n 377:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 378:            pub fn reserve(&mut self, additional: usize) {\n 379:                let old_cap = self.cap();\n 380:                let used_cap = self.len() + 1;\n 381:                let new_cap = new_capacity(old_cap, used_cap, additional);\n 382:        \n 383:                // *** This is the issue! new_cap is related to underlying buffer, capacity() is not.\n 384:                if new_cap > old_cap\n 385:                /* BUG self.capacity() */\n 386:                {\n 387: error>             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n 388:                    // new_cap <= self.cap, old_cap < new_cap => 2 * old_cap <= new_cap\n 389:                    unsafe {\n 390:                        self.handle_capacity_increase(old_cap);\n 391:                    }\n 392:                }\n 393:            }\n"
        },
        "unique_name": "reserve-L387-1"
      },
      "fix": {
        "certainty": false,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "several functions (cap, len, new_capacity) need refinement"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:379:23: 379:33 (#0)))"
          },
          {
            "name": "a6",
            "depth": 6,
            "origin": "No provenance"
          },
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:380:24: 380:34 (#0)))"
          },
          {
            "name": "a5",
            "depth": 5,
            "origin": "(CallReturn, Some(src/vec_deque.rs:381:23: 381:66 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/reserve-L387-1/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: assignment might be unsafe\n   --> src/vec_deque.rs:193:13\n    |\n193 |             self.head += old_capacity;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a3.0 + a0 = a3.0\"\n              blamed variable: \"Some(a3)\"\n              related variables: [{\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:193:13\n    |\n193 |             self.head += old_capacity;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 193,
        "col": 13,
        "raw1": "error[E0999]: assignment might be unsafe\n   --> src/vec_deque.rs:193:13\n    |\n193 |             self.head += old_capacity;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a3.0 + a0 = a3.0\"\n              blamed variable: \"Some(a3)\"\n              related variables: [{\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:193:13\n    |\n193 |             self.head += old_capacity;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\n\n",
        "predicate": "a3.0 + a0 = a3.0",
        "blamed_variable": "Some(a3)",
        "related_variables": [
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          },
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          },
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 166,
          "end": 212,
          "name": "handle_capacity_increase",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:166-212):\nFunction name: handle_capacity_increase\n---------------------------------------------------------------------------------------------\n 166:            #[inline]\n 167:            unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n 168:                let new_capacity = self.cap();\n 169:        \n 170:                // Move the shortest contiguous section of the ring buffer\n 171:                //    T             H\n 172:                //   [o o o o o o o . ]\n 173:                //    T             H\n 174:                // A [o o o o o o o . . . . . . . . . ]\n 175:                //        H T\n 176:                //   [o o . o o o o o ]\n 177:                //          T             H\n 178:                // B [. . . o o o o o o o . . . . . . ]\n 179:                //              H T\n 180:                //   [o o o o o . o o ]\n 181:                //              H                 T\n 182:                // C [o o o o o . . . . . . . . . o o ]\n 183:        \n 184:                if self.tail <= self.head {\n 185:                    // A\n 186:                    // Nop\n 187:                } else if self.head < old_capacity - self.tail {\n 188:                    // B\n 189:                    unsafe {\n 190:                        let head = self.head;\n 191:                        self.copy_nonoverlapping(old_capacity, 0, head); // FLUX-PANIC: self.head -> head\n 192:                    }\n 193: error>             self.head += old_capacity;\n 194:                    debug_assert!(self.head > self.tail);\n 195:                } else {\n 196:                    // C\n 197:                    let new_tail = new_capacity - (old_capacity - self.tail);\n 198:                    {\n 199:                        let tail = self.tail;\n 200:                        self.copy_nonoverlapping(new_tail, tail, old_capacity - tail); // FLUX-PANIC: self.tail -> tail\n 201:                    }\n 202:                    self.tail = new_tail;\n 203:                    debug_assert!(self.head < self.tail);\n 204:                }\n 205:                // TODO: Uncomment\n 206:                // // FLUX debug_assert!(self.head < self.cap());\n 207:                // assert(self.head < self.cap());\n 208:                // // FLUX debug_assert!(self.tail < self.cap());\n 209:                // assert(self.tail < self.cap());\n 210:                // // FLUX debug_assert!(self.cap().count_ones() == 1);\n 211:                // assert(is_power_of_two(self.cap()));\n 212:            }\n"
        },
        "unique_name": "handle_capacity_increase-L193-0"
      },
      "fix": {
        "certainty": false,
        "err_type": "2b",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "old_capacity needs to relate to self.cap()"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/handle_capacity_increase-L193-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:75:35\n    |\n75  |     #[flux::field({ usize[head] | head < cap })]\n    |                                   ^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"0 < a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))\"}]\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:279:19\n    |\n279 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 281,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:75:35\n    |\n75  |     #[flux::field({ usize[head] | head < cap })]\n    |                                   ^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"0 < a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))\"}]\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:279:19\n    |\n279 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`\n\n",
        "predicate": "0 < a2",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 273,
          "end": 286,
          "name": "with_capacity_in",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:273-286):\nFunction name: with_capacity_in\n---------------------------------------------------------------------------------------------\n 273:            //#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n 274:            fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n 275:                // FLUX-TODO: same as MAXIMUM_ZST_CAPACITY?: assert!(capacity < 1_usize << usize::BITS - 1, \"capacity overflow\");\n 276:                // TODO: Uncomment\n 277:                // assert(capacity < MAXIMUM_ZST_CAPACITY);\n 278:                // +1 since the ringbuffer always leaves one space empty\n 279:                let cap = real_capacity(capacity);\n 280:        \n 281: error>         VecDeque {\n 282:                    tail: 0,\n 283:                    head: 0,\n 284:                    buf: RawVec::with_capacity_in(cap, alloc),\n 285:                }\n 286:            }\n"
        },
        "unique_name": "with_capacity_in-L281-1"
      },
      "fix": {
        "certainty": true,
        "err_type": "1a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "real_capacity needs output to be >= input cap"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/with_capacity_in-L281-1/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:390:17\n    |\n390 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a8 = a6\"\n              blamed variable: \"Some(a8)\"\n              related variables: [{\"name\": \"a8\", \"depth\": 7, \"origin\": \"(Sub(Call), Some(src/vec_deque.rs:390:17: 390:55 (#0)))\"}, {\"name\": \"a6\", \"depth\": 6, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:390:17\n    |\n390 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a8 (depth 7)` defined here with originator `Sub(Call)`\n   --> src/vec_deque.rs:390:17\n    |\n390 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 390,
        "col": 17,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:390:17\n    |\n390 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a8 = a6\"\n              blamed variable: \"Some(a8)\"\n              related variables: [{\"name\": \"a8\", \"depth\": 7, \"origin\": \"(Sub(Call), Some(src/vec_deque.rs:390:17: 390:55 (#0)))\"}, {\"name\": \"a6\", \"depth\": 6, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:390:17\n    |\n390 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a8 (depth 7)` defined here with originator `Sub(Call)`\n   --> src/vec_deque.rs:390:17\n    |\n390 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a8 = a6",
        "blamed_variable": "Some(a8)",
        "related_variables": [
          {
            "name": "a8",
            "depth": 7,
            "origin": "(Sub(Call), Some(src/vec_deque.rs:390:17: 390:55 (#0)))"
          },
          {
            "name": "a6",
            "depth": 6,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 377,
          "end": 393,
          "name": "reserve",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:377-393):\nFunction name: reserve\n---------------------------------------------------------------------------------------------\n 377:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 378:            pub fn reserve(&mut self, additional: usize) {\n 379:                let old_cap = self.cap();\n 380:                let used_cap = self.len() + 1;\n 381:                let new_cap = new_capacity(old_cap, used_cap, additional);\n 382:        \n 383:                // *** This is the issue! new_cap is related to underlying buffer, capacity() is not.\n 384:                if new_cap > old_cap\n 385:                /* BUG self.capacity() */\n 386:                {\n 387:                    self.buf.reserve_exact(used_cap, new_cap - used_cap);\n 388:                    // new_cap <= self.cap, old_cap < new_cap => 2 * old_cap <= new_cap\n 389:                    unsafe {\n 390: error>                 self.handle_capacity_increase(old_cap);\n 391:                    }\n 392:                }\n 393:            }\n"
        },
        "unique_name": "reserve-L390-0"
      },
      "fix": {
        "certainty": false,
        "err_type": "1a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "old_cap needs to have a refinement, probably from self.cap()"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a8",
            "depth": 7,
            "origin": "(Sub(Call), Some(src/vec_deque.rs:390:17: 390:55 (#0)))"
          },
          {
            "name": "a6",
            "depth": 6,
            "origin": "No provenance"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/reserve-L390-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:515:13\n    |\n515 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a5 = a3\"\n              blamed variable: \"Some(a5)\"\n              related variables: [{\"name\": \"a5\", \"depth\": 5, \"origin\": \"(Sub(Call), Some(src/vec_deque.rs:515:13: 515:43 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:515:13\n    |\n515 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a5 (depth 5)` defined here with originator `Sub(Call)`\n   --> src/vec_deque.rs:515:13\n    |\n515 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 515,
        "col": 13,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:515:13\n    |\n515 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a5 = a3\"\n              blamed variable: \"Some(a5)\"\n              related variables: [{\"name\": \"a5\", \"depth\": 5, \"origin\": \"(Sub(Call), Some(src/vec_deque.rs:515:13: 515:43 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:515:13\n    |\n515 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a5 (depth 5)` defined here with originator `Sub(Call)`\n   --> src/vec_deque.rs:515:13\n    |\n515 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a5 = a3",
        "blamed_variable": "Some(a5)",
        "related_variables": [
          {
            "name": "a5",
            "depth": 5,
            "origin": "(Sub(Call), Some(src/vec_deque.rs:515:13: 515:43 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 505,
          "end": 517,
          "name": "push_front",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:505-517):\nFunction name: push_front\n---------------------------------------------------------------------------------------------\n 505:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 506:            pub fn push_front(&mut self, value: T) {\n 507:                if self.is_full() {\n 508:                    self.grow();\n 509:                }\n 510:        \n 511:                let tail = self.tail;\n 512:                self.tail = self.wrap_sub(tail, 1);\n 513:                let tail = self.tail;\n 514:                unsafe {\n 515: error>             self.buffer_write(tail, value);\n 516:                }\n 517:            }\n"
        },
        "unique_name": "push_front-L515-0"
      },
      "fix": {
        "certainty": false,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "self.wrap_sub doesn't admit any refinement information?"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a5",
            "depth": 5,
            "origin": "(Sub(Call), Some(src/vec_deque.rs:515:13: 515:43 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/push_front-L515-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: assignment might be unsafe\n   --> src/vec_deque.rs:202:13\n    |\n202 |             self.tail = new_tail;\n    |             ^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a2 - a0 - a3.1 = a3.1\"\n              blamed variable: \"Some(a3)\"\n              related variables: [{\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:168:28: 168:38 (#0)))\"}]\n   --> src/vec_deque.rs:202:13\n    |\n202 |             self.tail = new_tail;\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:168:28\n    |\n168 |         let new_capacity = self.cap();\n    |                            ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 202,
        "col": 13,
        "raw1": "error[E0999]: assignment might be unsafe\n   --> src/vec_deque.rs:202:13\n    |\n202 |             self.tail = new_tail;\n    |             ^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a2 - a0 - a3.1 = a3.1\"\n              blamed variable: \"Some(a3)\"\n              related variables: [{\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:168:28: 168:38 (#0)))\"}]\n   --> src/vec_deque.rs:202:13\n    |\n202 |             self.tail = new_tail;\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:168:28\n    |\n168 |         let new_capacity = self.cap();\n    |                            ^^^^^^^^^^\n\n",
        "predicate": "a2 - a0 - a3.1 = a3.1",
        "blamed_variable": "Some(a3)",
        "related_variables": [
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          },
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          },
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:168:28: 168:38 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 166,
          "end": 212,
          "name": "handle_capacity_increase",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:166-212):\nFunction name: handle_capacity_increase\n---------------------------------------------------------------------------------------------\n 166:            #[inline]\n 167:            unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n 168:                let new_capacity = self.cap();\n 169:        \n 170:                // Move the shortest contiguous section of the ring buffer\n 171:                //    T             H\n 172:                //   [o o o o o o o . ]\n 173:                //    T             H\n 174:                // A [o o o o o o o . . . . . . . . . ]\n 175:                //        H T\n 176:                //   [o o . o o o o o ]\n 177:                //          T             H\n 178:                // B [. . . o o o o o o o . . . . . . ]\n 179:                //              H T\n 180:                //   [o o o o o . o o ]\n 181:                //              H                 T\n 182:                // C [o o o o o . . . . . . . . . o o ]\n 183:        \n 184:                if self.tail <= self.head {\n 185:                    // A\n 186:                    // Nop\n 187:                } else if self.head < old_capacity - self.tail {\n 188:                    // B\n 189:                    unsafe {\n 190:                        let head = self.head;\n 191:                        self.copy_nonoverlapping(old_capacity, 0, head); // FLUX-PANIC: self.head -> head\n 192:                    }\n 193:                    self.head += old_capacity;\n 194:                    debug_assert!(self.head > self.tail);\n 195:                } else {\n 196:                    // C\n 197:                    let new_tail = new_capacity - (old_capacity - self.tail);\n 198:                    {\n 199:                        let tail = self.tail;\n 200:                        self.copy_nonoverlapping(new_tail, tail, old_capacity - tail); // FLUX-PANIC: self.tail -> tail\n 201:                    }\n 202: error>             self.tail = new_tail;\n 203:                    debug_assert!(self.head < self.tail);\n 204:                }\n 205:                // TODO: Uncomment\n 206:                // // FLUX debug_assert!(self.head < self.cap());\n 207:                // assert(self.head < self.cap());\n 208:                // // FLUX debug_assert!(self.tail < self.cap());\n 209:                // assert(self.tail < self.cap());\n 210:                // // FLUX debug_assert!(self.cap().count_ones() == 1);\n 211:                // assert(is_power_of_two(self.cap()));\n 212:            }\n"
        },
        "unique_name": "handle_capacity_increase-L202-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2b",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "old_capacity needs to relate to self.cap()"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/handle_capacity_increase-L202-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:73:35\n    |\n73  |     #[flux::field({ usize[tail] | tail < cap })]\n    |                                   ^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"0 < a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))\"}]\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:279:19\n    |\n279 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 281,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:73:35\n    |\n73  |     #[flux::field({ usize[tail] | tail < cap })]\n    |                                   ^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"0 < a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))\"}]\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:279:19\n    |\n279 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "0 < a2",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 273,
          "end": 286,
          "name": "with_capacity_in",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:273-286):\nFunction name: with_capacity_in\n---------------------------------------------------------------------------------------------\n 273:            //#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n 274:            fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n 275:                // FLUX-TODO: same as MAXIMUM_ZST_CAPACITY?: assert!(capacity < 1_usize << usize::BITS - 1, \"capacity overflow\");\n 276:                // TODO: Uncomment\n 277:                // assert(capacity < MAXIMUM_ZST_CAPACITY);\n 278:                // +1 since the ringbuffer always leaves one space empty\n 279:                let cap = real_capacity(capacity);\n 280:        \n 281: error>         VecDeque {\n 282:                    tail: 0,\n 283:                    head: 0,\n 284:                    buf: RawVec::with_capacity_in(cap, alloc),\n 285:                }\n 286:            }\n"
        },
        "unique_name": "with_capacity_in-L281-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "1a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "real_capacity needs output to be >= input cap"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/with_capacity_in-L281-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: assignment might be unsafe\n   --> src/vec_deque.rs:538:9\n    |\n538 |         self.head = self.wrap_add(self.head, 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a4 = a3.0\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:538:21: 538:48 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:538:9\n    |\n538 |         self.head = self.wrap_add(self.head, 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:538:21\n    |\n538 |         self.head = self.wrap_add(self.head, 1);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 538,
        "col": 9,
        "raw1": "error[E0999]: assignment might be unsafe\n   --> src/vec_deque.rs:538:9\n    |\n538 |         self.head = self.wrap_add(self.head, 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a4 = a3.0\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:538:21: 538:48 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:538:9\n    |\n538 |         self.head = self.wrap_add(self.head, 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:538:21\n    |\n538 |         self.head = self.wrap_add(self.head, 1);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a4 = a3.0",
        "blamed_variable": "Some(a4)",
        "related_variables": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:538:21: 538:48 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 531,
          "end": 540,
          "name": "push_back",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:531-540):\nFunction name: push_back\n---------------------------------------------------------------------------------------------\n 531:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 532:            pub fn push_back(&mut self, value: T) {\n 533:                if self.is_full() {\n 534:                    self.grow();\n 535:                }\n 536:        \n 537:                let head = self.head;\n 538: error>         self.head = self.wrap_add(self.head, 1);\n 539:                unsafe { self.buffer_write(head, value) }\n 540:            }\n"
        },
        "unique_name": "push_back-L538-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "1a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "self.wrap_add needs a refinement"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:538:21: 538:48 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/push_back-L538-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:197:28\n    |\n197 |             let new_tail = new_capacity - (old_capacity - self.tail);\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a2 - a0 - a3.1 \u2265 0\"\n              blamed variable: \"Some(a3)\"\n              related variables: [{\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:168:28: 168:38 (#0)))\"}]\n   --> src/vec_deque.rs:197:28\n    |\n197 |             let new_tail = new_capacity - (old_capacity - self.tail);\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:168:28\n    |\n168 |         let new_capacity = self.cap();\n    |                            ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 197,
        "col": 28,
        "raw1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:197:28\n    |\n197 |             let new_tail = new_capacity - (old_capacity - self.tail);\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a2 - a0 - a3.1 \u2265 0\"\n              blamed variable: \"Some(a3)\"\n              related variables: [{\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:168:28: 168:38 (#0)))\"}]\n   --> src/vec_deque.rs:197:28\n    |\n197 |             let new_tail = new_capacity - (old_capacity - self.tail);\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:168:28\n    |\n168 |         let new_capacity = self.cap();\n    |                            ^^^^^^^^^^\n\n",
        "predicate": "a2 - a0 - a3.1 \u2265 0",
        "blamed_variable": "Some(a3)",
        "related_variables": [
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          },
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          },
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:168:28: 168:38 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 166,
          "end": 212,
          "name": "handle_capacity_increase",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:166-212):\nFunction name: handle_capacity_increase\n---------------------------------------------------------------------------------------------\n 166:            #[inline]\n 167:            unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n 168:                let new_capacity = self.cap();\n 169:        \n 170:                // Move the shortest contiguous section of the ring buffer\n 171:                //    T             H\n 172:                //   [o o o o o o o . ]\n 173:                //    T             H\n 174:                // A [o o o o o o o . . . . . . . . . ]\n 175:                //        H T\n 176:                //   [o o . o o o o o ]\n 177:                //          T             H\n 178:                // B [. . . o o o o o o o . . . . . . ]\n 179:                //              H T\n 180:                //   [o o o o o . o o ]\n 181:                //              H                 T\n 182:                // C [o o o o o . . . . . . . . . o o ]\n 183:        \n 184:                if self.tail <= self.head {\n 185:                    // A\n 186:                    // Nop\n 187:                } else if self.head < old_capacity - self.tail {\n 188:                    // B\n 189:                    unsafe {\n 190:                        let head = self.head;\n 191:                        self.copy_nonoverlapping(old_capacity, 0, head); // FLUX-PANIC: self.head -> head\n 192:                    }\n 193:                    self.head += old_capacity;\n 194:                    debug_assert!(self.head > self.tail);\n 195:                } else {\n 196:                    // C\n 197: error>             let new_tail = new_capacity - (old_capacity - self.tail);\n 198:                    {\n 199:                        let tail = self.tail;\n 200:                        self.copy_nonoverlapping(new_tail, tail, old_capacity - tail); // FLUX-PANIC: self.tail -> tail\n 201:                    }\n 202:                    self.tail = new_tail;\n 203:                    debug_assert!(self.head < self.tail);\n 204:                }\n 205:                // TODO: Uncomment\n 206:                // // FLUX debug_assert!(self.head < self.cap());\n 207:                // assert(self.head < self.cap());\n 208:                // // FLUX debug_assert!(self.tail < self.cap());\n 209:                // assert(self.tail < self.cap());\n 210:                // // FLUX debug_assert!(self.cap().count_ones() == 1);\n 211:                // assert(is_power_of_two(self.cap()));\n 212:            }\n"
        },
        "unique_name": "handle_capacity_increase-L197-1"
      },
      "fix": {
        "certainty": true,
        "err_type": "2b",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "old_capacity needs to relate to self.cap()"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/handle_capacity_increase-L197-1/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:409:9\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:30:47\n    |\n30  | #[flux::alias(type Size = usize{v: pow2(v) && 1<=v })]\n    |                                               ^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"1 \u2264 a1\"\n              blamed variable: \"Some(a1)\"\n              related variables: [{\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:409:37: 409:47 (#0)))\"}]\n   --> src/vec_deque.rs:409:9\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:409:37\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |                                     ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 409,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:409:9\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:30:47\n    |\n30  | #[flux::alias(type Size = usize{v: pow2(v) && 1<=v })]\n    |                                               ^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"1 \u2264 a1\"\n              blamed variable: \"Some(a1)\"\n              related variables: [{\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:409:37: 409:47 (#0)))\"}]\n   --> src/vec_deque.rs:409:9\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:409:37\n    |\n409 |         count(self.tail, self.head, self.cap())\n    |                                     ^^^^^^^^^^\n\n",
        "predicate": "1 \u2264 a1",
        "blamed_variable": "Some(a1)",
        "related_variables": [
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:409:37: 409:47 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 407,
          "end": 410,
          "name": "len",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:407-410):\nFunction name: len\n---------------------------------------------------------------------------------------------\n 407:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 408:            pub fn len(&self) -> usize {\n 409: error>         count(self.tail, self.head, self.cap())\n 410:            }\n"
        },
        "unique_name": "len-L409-1"
      },
      "fix": {
        "certainty": true,
        "err_type": "1a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "self.cap() needs pow2 on output"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:409:37: 409:47 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/len-L409-1/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:551:9\n    |\n551 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a1 + a1 = a2.2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:550:23: 550:33 (#0)))\"}]\n   --> src/vec_deque.rs:551:9\n    |\n551 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:550:23\n    |\n550 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 551,
        "col": 9,
        "raw1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:551:9\n    |\n551 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a1 + a1 = a2.2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:550:23: 550:33 (#0)))\"}]\n   --> src/vec_deque.rs:551:9\n    |\n551 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:550:23\n    |\n550 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\n\n",
        "predicate": "a1 + a1 = a2.2",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "No provenance"
          },
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:550:23: 550:33 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 545,
          "end": 560,
          "name": "grow",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:545-560):\nFunction name: grow\n---------------------------------------------------------------------------------------------\n 545:            #[inline(never)]\n 546:            fn grow(&mut self) {\n 547:                // Extend or possibly remove this assertion when valid use-cases for growing the\n 548:                // buffer without it being full emerge\n 549:                debug_assert!(self.is_full());\n 550:                let old_cap = self.cap();\n 551: error>         self.buf.reserve_exact(old_cap, old_cap);\n 552:                let _ = lem_power_two(old_cap);\n 553:                let new_cap = self.cap();\n 554:                // TODO: Uncomment\n 555:                // assert(new_cap == old_cap * 2);\n 556:                unsafe {\n 557:                    self.handle_capacity_increase(old_cap);\n 558:                }\n 559:                debug_assert!(!self.is_full());\n 560:            }\n"
        },
        "unique_name": "grow-L551-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "1a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "self.cap() doesn't have any refinement"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:550:23: 550:33 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/grow-L551-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:126:9\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:30:40\n    |\n30  | #[flux::alias(type Size = usize{v: pow2(v) && 1<=v })]\n    |                                        ^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"pow2(a4)\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:126:46: 126:56 (#0)))\"}]\n   --> src/vec_deque.rs:126:9\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:126:46\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |                                              ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 126,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:126:9\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:30:40\n    |\n30  | #[flux::alias(type Size = usize{v: pow2(v) && 1<=v })]\n    |                                        ^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"pow2(a4)\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:126:46: 126:56 (#0)))\"}]\n   --> src/vec_deque.rs:126:9\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:126:46\n    |\n126 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |                                              ^^^^^^^^^^\n\n",
        "predicate": "pow2(a4)",
        "blamed_variable": "Some(a4)",
        "related_variables": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:126:46: 126:56 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 124,
          "end": 127,
          "name": "wrap_add",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:124-127):\nFunction name: wrap_add\n---------------------------------------------------------------------------------------------\n 124:            #[inline]\n 125:            fn wrap_add(&self, idx: usize, addend: usize) -> usize {\n 126: error>         wrap_index(idx.wrapping_add(addend), self.cap())\n 127:            }\n"
        },
        "unique_name": "wrap_add-L126-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "cap needs pow2 on output"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:126:46: 126:56 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/wrap_add-L126-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:77:45\n    |\n77  |     #[flux::field({ RawVec<T, A>[cap] | pow2(cap) && 1 <= cap } )]\n    |                                             ^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"pow2(a2)\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))\"}]\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:279:19\n    |\n279 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 281,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:77:45\n    |\n77  |     #[flux::field({ RawVec<T, A>[cap] | pow2(cap) && 1 <= cap } )]\n    |                                             ^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"pow2(a2)\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))\"}]\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:279:19\n    |\n279 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "pow2(a2)",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 273,
          "end": 286,
          "name": "with_capacity_in",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:273-286):\nFunction name: with_capacity_in\n---------------------------------------------------------------------------------------------\n 273:            //#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n 274:            fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n 275:                // FLUX-TODO: same as MAXIMUM_ZST_CAPACITY?: assert!(capacity < 1_usize << usize::BITS - 1, \"capacity overflow\");\n 276:                // TODO: Uncomment\n 277:                // assert(capacity < MAXIMUM_ZST_CAPACITY);\n 278:                // +1 since the ringbuffer always leaves one space empty\n 279:                let cap = real_capacity(capacity);\n 280:        \n 281: error>         VecDeque {\n 282:                    tail: 0,\n 283:                    head: 0,\n 284:                    buf: RawVec::with_capacity_in(cap, alloc),\n 285:                }\n 286:            }\n"
        },
        "unique_name": "with_capacity_in-L281-2"
      },
      "fix": {
        "certainty": true,
        "err_type": "1a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "real_capacity needs to return a pow2"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/with_capacity_in-L281-2/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:119:9\n    |\n119 |         self.cap() - self.len() == 1\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a1 - a2 \u2265 0\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:119:22: 119:32 (#0)))\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:119:9: 119:19 (#0)))\"}]\n   --> src/vec_deque.rs:119:9\n    |\n119 |         self.cap() - self.len() == 1\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:119:22\n    |\n119 |         self.cap() - self.len() == 1\n    |                      ^^^^^^^^^^\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:119:9\n    |\n119 |         self.cap() - self.len() == 1\n    |         ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 119,
        "col": 9,
        "raw1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:119:9\n    |\n119 |         self.cap() - self.len() == 1\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a1 - a2 \u2265 0\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:119:22: 119:32 (#0)))\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:119:9: 119:19 (#0)))\"}]\n   --> src/vec_deque.rs:119:9\n    |\n119 |         self.cap() - self.len() == 1\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:119:22\n    |\n119 |         self.cap() - self.len() == 1\n    |                      ^^^^^^^^^^\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:119:9\n    |\n119 |         self.cap() - self.len() == 1\n    |         ^^^^^^^^^^\n\n",
        "predicate": "a1 - a2 \u2265 0",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:119:22: 119:32 (#0)))"
          },
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:119:9: 119:19 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 117,
          "end": 120,
          "name": "is_full",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:117-120):\nFunction name: is_full\n---------------------------------------------------------------------------------------------\n 117:            #[inline]\n 118:            fn is_full(&self) -> bool {\n 119: error>         self.cap() - self.len() == 1\n 120:            }\n"
        },
        "unique_name": "is_full-L119-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "cap and len need refinements"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:119:22: 119:32 (#0)))"
          },
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:119:9: 119:19 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": "both cap and len need refinement"
      },
      "summary_source_path": "5c538c8/is_full-L119-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:197:43\n    |\n197 |             let new_tail = new_capacity - (old_capacity - self.tail);\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a0 - a3.1 \u2265 0\"\n              blamed variable: \"Some(a3)\"\n              related variables: [{\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:197:43\n    |\n197 |             let new_tail = new_capacity - (old_capacity - self.tail);\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 197,
        "col": 43,
        "raw1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:197:43\n    |\n197 |             let new_tail = new_capacity - (old_capacity - self.tail);\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a0 - a3.1 \u2265 0\"\n              blamed variable: \"Some(a3)\"\n              related variables: [{\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:197:43\n    |\n197 |             let new_tail = new_capacity - (old_capacity - self.tail);\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\n\n",
        "predicate": "a0 - a3.1 \u2265 0",
        "blamed_variable": "Some(a3)",
        "related_variables": [
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          },
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          },
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 166,
          "end": 212,
          "name": "handle_capacity_increase",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:166-212):\nFunction name: handle_capacity_increase\n---------------------------------------------------------------------------------------------\n 166:            #[inline]\n 167:            unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n 168:                let new_capacity = self.cap();\n 169:        \n 170:                // Move the shortest contiguous section of the ring buffer\n 171:                //    T             H\n 172:                //   [o o o o o o o . ]\n 173:                //    T             H\n 174:                // A [o o o o o o o . . . . . . . . . ]\n 175:                //        H T\n 176:                //   [o o . o o o o o ]\n 177:                //          T             H\n 178:                // B [. . . o o o o o o o . . . . . . ]\n 179:                //              H T\n 180:                //   [o o o o o . o o ]\n 181:                //              H                 T\n 182:                // C [o o o o o . . . . . . . . . o o ]\n 183:        \n 184:                if self.tail <= self.head {\n 185:                    // A\n 186:                    // Nop\n 187:                } else if self.head < old_capacity - self.tail {\n 188:                    // B\n 189:                    unsafe {\n 190:                        let head = self.head;\n 191:                        self.copy_nonoverlapping(old_capacity, 0, head); // FLUX-PANIC: self.head -> head\n 192:                    }\n 193:                    self.head += old_capacity;\n 194:                    debug_assert!(self.head > self.tail);\n 195:                } else {\n 196:                    // C\n 197: error>             let new_tail = new_capacity - (old_capacity - self.tail);\n 198:                    {\n 199:                        let tail = self.tail;\n 200:                        self.copy_nonoverlapping(new_tail, tail, old_capacity - tail); // FLUX-PANIC: self.tail -> tail\n 201:                    }\n 202:                    self.tail = new_tail;\n 203:                    debug_assert!(self.head < self.tail);\n 204:                }\n 205:                // TODO: Uncomment\n 206:                // // FLUX debug_assert!(self.head < self.cap());\n 207:                // assert(self.head < self.cap());\n 208:                // // FLUX debug_assert!(self.tail < self.cap());\n 209:                // assert(self.tail < self.cap());\n 210:                // // FLUX debug_assert!(self.cap().count_ones() == 1);\n 211:                // assert(is_power_of_two(self.cap()));\n 212:            }\n"
        },
        "unique_name": "handle_capacity_increase-L197-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2b",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "old_capacity needs to relate to self.cap()"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/handle_capacity_increase-L197-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:77:54\n    |\n77  |     #[flux::field({ RawVec<T, A>[cap] | pow2(cap) && 1 <= cap } )]\n    |                                                      ^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"1 \u2264 a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))\"}]\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:279:19\n    |\n279 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 281,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:77:54\n    |\n77  |     #[flux::field({ RawVec<T, A>[cap] | pow2(cap) && 1 <= cap } )]\n    |                                                      ^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"1 \u2264 a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))\"}]\n   --> src/vec_deque.rs:281:9\n    |\n281 | /         VecDeque {\n282 | |             tail: 0,\n283 | |             head: 0,\n284 | |             buf: RawVec::with_capacity_in(cap, alloc),\n285 | |         }\n    | |_________^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:279:19\n    |\n279 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "1 \u2264 a2",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 273,
          "end": 286,
          "name": "with_capacity_in",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:273-286):\nFunction name: with_capacity_in\n---------------------------------------------------------------------------------------------\n 273:            //#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n 274:            fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n 275:                // FLUX-TODO: same as MAXIMUM_ZST_CAPACITY?: assert!(capacity < 1_usize << usize::BITS - 1, \"capacity overflow\");\n 276:                // TODO: Uncomment\n 277:                // assert(capacity < MAXIMUM_ZST_CAPACITY);\n 278:                // +1 since the ringbuffer always leaves one space empty\n 279:                let cap = real_capacity(capacity);\n 280:        \n 281: error>         VecDeque {\n 282:                    tail: 0,\n 283:                    head: 0,\n 284:                    buf: RawVec::with_capacity_in(cap, alloc),\n 285:                }\n 286:            }\n"
        },
        "unique_name": "with_capacity_in-L281-3"
      },
      "fix": {
        "certainty": true,
        "err_type": "1a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "real_capacity needs to return output >= 1"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:279:19: 279:42 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/with_capacity_in-L281-3/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: assignment might be unsafe\n   --> src/vec_deque.rs:512:9\n    |\n512 |         self.tail = self.wrap_sub(tail, 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a4 = a3.1\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:512:21: 512:43 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:512:9\n    |\n512 |         self.tail = self.wrap_sub(tail, 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:512:21\n    |\n512 |         self.tail = self.wrap_sub(tail, 1);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 512,
        "col": 9,
        "raw1": "error[E0999]: assignment might be unsafe\n   --> src/vec_deque.rs:512:9\n    |\n512 |         self.tail = self.wrap_sub(tail, 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a4 = a3.1\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:512:21: 512:43 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:512:9\n    |\n512 |         self.tail = self.wrap_sub(tail, 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:512:21\n    |\n512 |         self.tail = self.wrap_sub(tail, 1);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a4 = a3.1",
        "blamed_variable": "Some(a4)",
        "related_variables": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:512:21: 512:43 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 505,
          "end": 517,
          "name": "push_front",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:505-517):\nFunction name: push_front\n---------------------------------------------------------------------------------------------\n 505:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 506:            pub fn push_front(&mut self, value: T) {\n 507:                if self.is_full() {\n 508:                    self.grow();\n 509:                }\n 510:        \n 511:                let tail = self.tail;\n 512: error>         self.tail = self.wrap_sub(tail, 1);\n 513:                let tail = self.tail;\n 514:                unsafe {\n 515:                    self.buffer_write(tail, value);\n 516:                }\n 517:            }\n"
        },
        "unique_name": "push_front-L512-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "wrap_sub unrefined (needs to relate to tail)"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:512:21: 512:43 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/push_front-L512-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:539:18\n    |\n539 |         unsafe { self.buffer_write(head, value) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a5 = a3\"\n              blamed variable: \"Some(a5)\"\n              related variables: [{\"name\": \"a5\", \"depth\": 5, \"origin\": \"(Sub(Call), Some(src/vec_deque.rs:539:18: 539:48 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:539:18\n    |\n539 |         unsafe { self.buffer_write(head, value) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a5 (depth 5)` defined here with originator `Sub(Call)`\n   --> src/vec_deque.rs:539:18\n    |\n539 |         unsafe { self.buffer_write(head, value) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 539,
        "col": 18,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:539:18\n    |\n539 |         unsafe { self.buffer_write(head, value) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a5 = a3\"\n              blamed variable: \"Some(a5)\"\n              related variables: [{\"name\": \"a5\", \"depth\": 5, \"origin\": \"(Sub(Call), Some(src/vec_deque.rs:539:18: 539:48 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:539:18\n    |\n539 |         unsafe { self.buffer_write(head, value) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a5 (depth 5)` defined here with originator `Sub(Call)`\n   --> src/vec_deque.rs:539:18\n    |\n539 |         unsafe { self.buffer_write(head, value) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a5 = a3",
        "blamed_variable": "Some(a5)",
        "related_variables": [
          {
            "name": "a5",
            "depth": 5,
            "origin": "(Sub(Call), Some(src/vec_deque.rs:539:18: 539:48 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 531,
          "end": 540,
          "name": "push_back",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:531-540):\nFunction name: push_back\n---------------------------------------------------------------------------------------------\n 531:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 532:            pub fn push_back(&mut self, value: T) {\n 533:                if self.is_full() {\n 534:                    self.grow();\n 535:                }\n 536:        \n 537:                let head = self.head;\n 538:                self.head = self.wrap_add(self.head, 1);\n 539: error>         unsafe { self.buffer_write(head, value) }\n 540:            }\n"
        },
        "unique_name": "push_back-L539-0"
      },
      "fix": {
        "certainty": false,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "I think it's because self.wrap_add isn't refined"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a5",
            "depth": 5,
            "origin": "(Sub(Call), Some(src/vec_deque.rs:539:18: 539:48 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/push_back-L539-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:358:9\n    |\n358 |         self.cap() - 1\n    |         ^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a1 - 1 \u2265 0\"\n              blamed variable: \"Some(a1)\"\n              related variables: [{\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:358:9: 358:19 (#0)))\"}]\n   --> src/vec_deque.rs:358:9\n    |\n358 |         self.cap() - 1\n    |         ^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:358:9\n    |\n358 |         self.cap() - 1\n    |         ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 358,
        "col": 9,
        "raw1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:358:9\n    |\n358 |         self.cap() - 1\n    |         ^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a1 - 1 \u2265 0\"\n              blamed variable: \"Some(a1)\"\n              related variables: [{\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:358:9: 358:19 (#0)))\"}]\n   --> src/vec_deque.rs:358:9\n    |\n358 |         self.cap() - 1\n    |         ^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:358:9\n    |\n358 |         self.cap() - 1\n    |         ^^^^^^^^^^\n\n",
        "predicate": "a1 - 1 \u2265 0",
        "blamed_variable": "Some(a1)",
        "related_variables": [
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:358:9: 358:19 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 356,
          "end": 359,
          "name": "capacity",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:356-359):\nFunction name: capacity\n---------------------------------------------------------------------------------------------\n 356:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 357:            pub fn capacity(&self) -> usize {\n 358: error>         self.cap() - 1\n 359:            }\n"
        },
        "unique_name": "capacity-L358-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "self.cap() output needs to be >= 1"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:358:9: 358:19 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/capacity-L358-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:557:13\n    |\n557 |             self.handle_capacity_increase(old_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a6 = a2\"\n              blamed variable: \"Some(a6)\"\n              related variables: [{\"name\": \"a6\", \"depth\": 5, \"origin\": \"(Sub(Call), Some(src/vec_deque.rs:557:13: 557:51 (#0)))\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:557:13\n    |\n557 |             self.handle_capacity_increase(old_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a6 (depth 5)` defined here with originator `Sub(Call)`\n   --> src/vec_deque.rs:557:13\n    |\n557 |             self.handle_capacity_increase(old_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 557,
        "col": 13,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:557:13\n    |\n557 |             self.handle_capacity_increase(old_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a6 = a2\"\n              blamed variable: \"Some(a6)\"\n              related variables: [{\"name\": \"a6\", \"depth\": 5, \"origin\": \"(Sub(Call), Some(src/vec_deque.rs:557:13: 557:51 (#0)))\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:557:13\n    |\n557 |             self.handle_capacity_increase(old_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a6 (depth 5)` defined here with originator `Sub(Call)`\n   --> src/vec_deque.rs:557:13\n    |\n557 |             self.handle_capacity_increase(old_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a6 = a2",
        "blamed_variable": "Some(a6)",
        "related_variables": [
          {
            "name": "a6",
            "depth": 5,
            "origin": "(Sub(Call), Some(src/vec_deque.rs:557:13: 557:51 (#0)))"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 545,
          "end": 560,
          "name": "grow",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:545-560):\nFunction name: grow\n---------------------------------------------------------------------------------------------\n 545:            #[inline(never)]\n 546:            fn grow(&mut self) {\n 547:                // Extend or possibly remove this assertion when valid use-cases for growing the\n 548:                // buffer without it being full emerge\n 549:                debug_assert!(self.is_full());\n 550:                let old_cap = self.cap();\n 551:                self.buf.reserve_exact(old_cap, old_cap);\n 552:                let _ = lem_power_two(old_cap);\n 553:                let new_cap = self.cap();\n 554:                // TODO: Uncomment\n 555:                // assert(new_cap == old_cap * 2);\n 556:                unsafe {\n 557: error>             self.handle_capacity_increase(old_cap);\n 558:                }\n 559:                debug_assert!(!self.is_full());\n 560:            }\n"
        },
        "unique_name": "grow-L557-0"
      },
      "fix": {
        "certainty": false,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "I think it's because self.cap() is unrefined"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [],
        "anything_missing": true,
        "missing_info": "self.cap()?",
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/grow-L557-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:187:31\n    |\n187 |         } else if self.head < old_capacity - self.tail {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a0 - a3.1 \u2265 0\"\n              blamed variable: \"Some(a3)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:187:31\n    |\n187 |         } else if self.head < old_capacity - self.tail {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 187,
        "col": 31,
        "raw1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:187:31\n    |\n187 |         } else if self.head < old_capacity - self.tail {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a0 - a3.1 \u2265 0\"\n              blamed variable: \"Some(a3)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:187:31\n    |\n187 |         } else if self.head < old_capacity - self.tail {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:167:51\n    |\n167 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\n\n",
        "predicate": "a0 - a3.1 \u2265 0",
        "blamed_variable": "Some(a3)",
        "related_variables": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 166,
          "end": 212,
          "name": "handle_capacity_increase",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:166-212):\nFunction name: handle_capacity_increase\n---------------------------------------------------------------------------------------------\n 166:            #[inline]\n 167:            unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n 168:                let new_capacity = self.cap();\n 169:        \n 170:                // Move the shortest contiguous section of the ring buffer\n 171:                //    T             H\n 172:                //   [o o o o o o o . ]\n 173:                //    T             H\n 174:                // A [o o o o o o o . . . . . . . . . ]\n 175:                //        H T\n 176:                //   [o o . o o o o o ]\n 177:                //          T             H\n 178:                // B [. . . o o o o o o o . . . . . . ]\n 179:                //              H T\n 180:                //   [o o o o o . o o ]\n 181:                //              H                 T\n 182:                // C [o o o o o . . . . . . . . . o o ]\n 183:        \n 184:                if self.tail <= self.head {\n 185:                    // A\n 186:                    // Nop\n 187: error>         } else if self.head < old_capacity - self.tail {\n 188:                    // B\n 189:                    unsafe {\n 190:                        let head = self.head;\n 191:                        self.copy_nonoverlapping(old_capacity, 0, head); // FLUX-PANIC: self.head -> head\n 192:                    }\n 193:                    self.head += old_capacity;\n 194:                    debug_assert!(self.head > self.tail);\n 195:                } else {\n 196:                    // C\n 197:                    let new_tail = new_capacity - (old_capacity - self.tail);\n 198:                    {\n 199:                        let tail = self.tail;\n 200:                        self.copy_nonoverlapping(new_tail, tail, old_capacity - tail); // FLUX-PANIC: self.tail -> tail\n 201:                    }\n 202:                    self.tail = new_tail;\n 203:                    debug_assert!(self.head < self.tail);\n 204:                }\n 205:                // TODO: Uncomment\n 206:                // // FLUX debug_assert!(self.head < self.cap());\n 207:                // assert(self.head < self.cap());\n 208:                // // FLUX debug_assert!(self.tail < self.cap());\n 209:                // assert(self.tail < self.cap());\n 210:                // // FLUX debug_assert!(self.cap().count_ones() == 1);\n 211:                // assert(is_power_of_two(self.cap()));\n 212:            }\n"
        },
        "unique_name": "handle_capacity_increase-L187-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2b",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "old_capacity needs to relate to self.cap()"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:167:51: 167:63 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/handle_capacity_increase-L187-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:387:46\n    |\n387 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |                                              ^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a5 - a4 + 1 \u2265 0\"\n              blamed variable: \"Some(a5)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:379:23: 379:33 (#0)))\"}, {\"name\": \"a5\", \"depth\": 5, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:381:23: 381:66 (#0)))\"}, {\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:380:24: 380:34 (#0)))\"}]\n   --> src/vec_deque.rs:387:46\n    |\n387 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |                                              ^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:379:23\n    |\n379 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\nnote: related variable `a5 (depth 5)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:381:23\n    |\n381 |         let new_cap = new_capacity(old_cap, used_cap, additional);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:380:24\n    |\n380 |         let used_cap = self.len() + 1;\n    |                        ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 387,
        "col": 46,
        "raw1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:387:46\n    |\n387 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |                                              ^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a5 - a4 + 1 \u2265 0\"\n              blamed variable: \"Some(a5)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:379:23: 379:33 (#0)))\"}, {\"name\": \"a5\", \"depth\": 5, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:381:23: 381:66 (#0)))\"}, {\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:380:24: 380:34 (#0)))\"}]\n   --> src/vec_deque.rs:387:46\n    |\n387 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |                                              ^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:379:23\n    |\n379 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\nnote: related variable `a5 (depth 5)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:381:23\n    |\n381 |         let new_cap = new_capacity(old_cap, used_cap, additional);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:380:24\n    |\n380 |         let used_cap = self.len() + 1;\n    |                        ^^^^^^^^^^\n\n",
        "predicate": "a5 - a4 + 1 \u2265 0",
        "blamed_variable": "Some(a5)",
        "related_variables": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:379:23: 379:33 (#0)))"
          },
          {
            "name": "a5",
            "depth": 5,
            "origin": "(CallReturn, Some(src/vec_deque.rs:381:23: 381:66 (#0)))"
          },
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:380:24: 380:34 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 377,
          "end": 393,
          "name": "reserve",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:377-393):\nFunction name: reserve\n---------------------------------------------------------------------------------------------\n 377:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 378:            pub fn reserve(&mut self, additional: usize) {\n 379:                let old_cap = self.cap();\n 380:                let used_cap = self.len() + 1;\n 381:                let new_cap = new_capacity(old_cap, used_cap, additional);\n 382:        \n 383:                // *** This is the issue! new_cap is related to underlying buffer, capacity() is not.\n 384:                if new_cap > old_cap\n 385:                /* BUG self.capacity() */\n 386:                {\n 387: error>             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n 388:                    // new_cap <= self.cap, old_cap < new_cap => 2 * old_cap <= new_cap\n 389:                    unsafe {\n 390:                        self.handle_capacity_increase(old_cap);\n 391:                    }\n 392:                }\n 393:            }\n"
        },
        "unique_name": "reserve-L387-0"
      },
      "fix": {
        "certainty": false,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "several refinements needed probably: cap, len, real_capacity"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:379:23: 379:33 (#0)))"
          },
          {
            "name": "a5",
            "depth": 5,
            "origin": "(CallReturn, Some(src/vec_deque.rs:381:23: 381:66 (#0)))"
          },
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:380:24: 380:34 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "5c538c8/reserve-L387-0/error_and_fix.json"
    }
  ],
  "7d90dc6": [
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:521:13\n    |\n521 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a5 = a3\"\n              blamed variable: \"Some(a5)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:518:21: 518:43 (#0)))\"}, {\"name\": \"a5\", \"depth\": 5, \"origin\": \"(Sub(Call), Some(src/vec_deque.rs:521:13: 521:43 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:521:13\n    |\n521 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:518:21\n    |\n518 |         self.tail = self.wrap_sub(tail, 1);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^\nnote: related variable `a5 (depth 5)` defined here with originator `Sub(Call)`\n   --> src/vec_deque.rs:521:13\n    |\n521 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 521,
        "col": 13,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:521:13\n    |\n521 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a5 = a3\"\n              blamed variable: \"Some(a5)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:518:21: 518:43 (#0)))\"}, {\"name\": \"a5\", \"depth\": 5, \"origin\": \"(Sub(Call), Some(src/vec_deque.rs:521:13: 521:43 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:521:13\n    |\n521 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:518:21\n    |\n518 |         self.tail = self.wrap_sub(tail, 1);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^\nnote: related variable `a5 (depth 5)` defined here with originator `Sub(Call)`\n   --> src/vec_deque.rs:521:13\n    |\n521 |             self.buffer_write(tail, value);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a5 = a3",
        "blamed_variable": "Some(a5)",
        "related_variables": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:518:21: 518:43 (#0)))"
          },
          {
            "name": "a5",
            "depth": 5,
            "origin": "(Sub(Call), Some(src/vec_deque.rs:521:13: 521:43 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 511,
          "end": 523,
          "name": "push_front",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:511-523):\nFunction name: push_front\n---------------------------------------------------------------------------------------------\n 511:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 512:            pub fn push_front(&mut self, value: T) {\n 513:                if self.is_full() {\n 514:                    self.grow();\n 515:                }\n 516:        \n 517:                let tail = self.tail;\n 518:                self.tail = self.wrap_sub(tail, 1);\n 519:                let tail = self.tail;\n 520:                unsafe {\n 521: error>             self.buffer_write(tail, value);\n 522:                }\n 523:            }\n"
        },
        "unique_name": "push_front-L521-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2b",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "push_front etc need VecDeque refinement on input/output probably"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/push_front-L521-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:395:17\n    |\n395 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:171:75\n    |\n171 |     #[flux::sig(fn (self: &strg VecDeque<T,A>[@s], old_capacity: usize{v: v * 2 <= s.cap && 1 <= v}) ensures self: VecDeque<T, A>)]\n    |                                                                           ^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a2 * 2 \u2264 a6.2\"\n              blamed variable: \"Some(a6)\"\n              related variables: [{\"name\": \"a5\", \"depth\": 5, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:386:23: 386:66 (#0)))\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"No provenance\"}, {\"name\": \"a6\", \"depth\": 6, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:384:23: 384:33 (#0)))\"}]\n   --> src/vec_deque.rs:395:17\n    |\n395 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a5 (depth 5)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:386:23\n    |\n386 |         let new_cap = new_capacity(old_cap, used_cap, additional);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:384:23\n    |\n384 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 395,
        "col": 17,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:395:17\n    |\n395 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:171:75\n    |\n171 |     #[flux::sig(fn (self: &strg VecDeque<T,A>[@s], old_capacity: usize{v: v * 2 <= s.cap && 1 <= v}) ensures self: VecDeque<T, A>)]\n    |                                                                           ^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a2 * 2 \u2264 a6.2\"\n              blamed variable: \"Some(a6)\"\n              related variables: [{\"name\": \"a5\", \"depth\": 5, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:386:23: 386:66 (#0)))\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"No provenance\"}, {\"name\": \"a6\", \"depth\": 6, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:384:23: 384:33 (#0)))\"}]\n   --> src/vec_deque.rs:395:17\n    |\n395 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a5 (depth 5)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:386:23\n    |\n386 |         let new_cap = new_capacity(old_cap, used_cap, additional);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:384:23\n    |\n384 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\n\n",
        "predicate": "a2 * 2 \u2264 a6.2",
        "blamed_variable": "Some(a6)",
        "related_variables": [
          {
            "name": "a5",
            "depth": 5,
            "origin": "(CallReturn, Some(src/vec_deque.rs:386:23: 386:66 (#0)))"
          },
          {
            "name": "a1",
            "depth": 1,
            "origin": "No provenance"
          },
          {
            "name": "a6",
            "depth": 6,
            "origin": "No provenance"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:384:23: 384:33 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 382,
          "end": 398,
          "name": "reserve",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:382-398):\nFunction name: reserve\n---------------------------------------------------------------------------------------------\n 382:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 383:            pub fn reserve(&mut self, additional: usize) {\n 384:                let old_cap = self.cap();\n 385:                let used_cap = self.len() + 1;\n 386:                let new_cap = new_capacity(old_cap, used_cap, additional);\n 387:        \n 388:                // *** This is the issue! new_cap is related to underlying buffer, capacity() is not.\n 389:                if new_cap > old_cap\n 390:                /* BUG self.capacity() */\n 391:                {\n 392:                    self.buf.reserve_exact(used_cap, new_cap - used_cap);\n 393:                    // new_cap <= self.cap, old_cap < new_cap => 2 * old_cap <= new_cap\n 394:                    unsafe {\n 395: error>                 self.handle_capacity_increase(old_cap);\n 396:                    }\n 397:                }\n 398:            }\n"
        },
        "unique_name": "reserve-L395-0"
      },
      "fix": {
        "certainty": false,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "We haven't established that the new capacity is 2x greater than the old capacity"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a5",
            "depth": 5,
            "origin": "(CallReturn, Some(src/vec_deque.rs:386:23: 386:66 (#0)))"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:384:23: 384:33 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/reserve-L395-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:77:54\n    |\n77  |     #[flux::field({ RawVec<T, A>[cap] | pow2(cap) && 1 <= cap } )]\n    |                                                      ^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"1 \u2264 a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"capacity\\\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))\"}]\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"capacity\"))`\n   --> src/vec_deque.rs:279:25\n    |\n279 |     fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n    |                         ^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:284:19\n    |\n284 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 286,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:77:54\n    |\n77  |     #[flux::field({ RawVec<T, A>[cap] | pow2(cap) && 1 <= cap } )]\n    |                                                      ^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"1 \u2264 a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"capacity\\\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))\"}]\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"capacity\"))`\n   --> src/vec_deque.rs:279:25\n    |\n279 |     fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n    |                         ^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:284:19\n    |\n284 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "1 \u2264 a2",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"capacity\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 278,
          "end": 291,
          "name": "with_capacity_in",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:278-291):\nFunction name: with_capacity_in\n---------------------------------------------------------------------------------------------\n 278:            //#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n 279:            fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n 280:                // FLUX-TODO: same as MAXIMUM_ZST_CAPACITY?: assert!(capacity < 1_usize << usize::BITS - 1, \"capacity overflow\");\n 281:                // TODO: Uncomment\n 282:                // assert(capacity < MAXIMUM_ZST_CAPACITY);\n 283:                // +1 since the ringbuffer always leaves one space empty\n 284:                let cap = real_capacity(capacity);\n 285:        \n 286: error>         VecDeque {\n 287:                    tail: 0,\n 288:                    head: 0,\n 289:                    buf: RawVec::with_capacity_in(cap, alloc),\n 290:                }\n 291:            }\n"
        },
        "unique_name": "with_capacity_in-L286-3"
      },
      "fix": {
        "certainty": true,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "real_capacity needs >= 1"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"capacity\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/with_capacity_in-L286-3/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:137:9\n    |\n137 |         wrap_index(idx.wrapping_sub(subtrahend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a postcondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:135:90\n    |\n135 |     #[flux::sig(fn (self: &VecDeque<T,A>[@s], idx: usize, subtrahend: usize) -> usize{v: v < s.cap})]\n    |                                                                                          ^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a4 < s.2\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:137:9: 137:61 (#0)))\"}]\n   --> src/vec_deque.rs:137:9\n    |\n137 |         wrap_index(idx.wrapping_sub(subtrahend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:137:9\n    |\n137 |         wrap_index(idx.wrapping_sub(subtrahend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 137,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:137:9\n    |\n137 |         wrap_index(idx.wrapping_sub(subtrahend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a postcondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:135:90\n    |\n135 |     #[flux::sig(fn (self: &VecDeque<T,A>[@s], idx: usize, subtrahend: usize) -> usize{v: v < s.cap})]\n    |                                                                                          ^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a4 < s.2\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:137:9: 137:61 (#0)))\"}]\n   --> src/vec_deque.rs:137:9\n    |\n137 |         wrap_index(idx.wrapping_sub(subtrahend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:137:9\n    |\n137 |         wrap_index(idx.wrapping_sub(subtrahend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a4 < s.2",
        "blamed_variable": "Some(a4)",
        "related_variables": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:137:9: 137:61 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 135,
          "end": 138,
          "name": "wrap_sub",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:135-138):\nFunction name: wrap_sub\n---------------------------------------------------------------------------------------------\n 135:            #[flux::sig(fn (self: &VecDeque<T,A>[@s], idx: usize, subtrahend: usize) -> usize{v: v < s.cap})]\n 136:            fn wrap_sub(&self, idx: usize, subtrahend: usize) -> usize {\n 137: error>         wrap_index(idx.wrapping_sub(subtrahend), self.cap())\n 138:            }\n"
        },
        "unique_name": "wrap_sub-L137-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "1a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "wrap_index needs > cap"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:137:9: 137:61 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/wrap_sub-L137-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:395:17\n    |\n395 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a9 = a6\"\n              blamed variable: \"Some(a9)\"\n              related variables: [{\"name\": \"a9\", \"depth\": 7, \"origin\": \"(AssumeEnsures, Some(src/vec_deque.rs:395:17: 395:55 (#0)))\"}, {\"name\": \"a6\", \"depth\": 6, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:395:17\n    |\n395 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a9 (depth 7)` defined here with originator `AssumeEnsures`\n   --> src/vec_deque.rs:395:17\n    |\n395 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 395,
        "col": 17,
        "raw1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:395:17\n    |\n395 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a9 = a6\"\n              blamed variable: \"Some(a9)\"\n              related variables: [{\"name\": \"a9\", \"depth\": 7, \"origin\": \"(AssumeEnsures, Some(src/vec_deque.rs:395:17: 395:55 (#0)))\"}, {\"name\": \"a6\", \"depth\": 6, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:395:17\n    |\n395 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a9 (depth 7)` defined here with originator `AssumeEnsures`\n   --> src/vec_deque.rs:395:17\n    |\n395 |                 self.handle_capacity_increase(old_cap);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a9 = a6",
        "blamed_variable": "Some(a9)",
        "related_variables": [
          {
            "name": "a9",
            "depth": 7,
            "origin": "(AssumeEnsures, Some(src/vec_deque.rs:395:17: 395:55 (#0)))"
          },
          {
            "name": "a6",
            "depth": 6,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 382,
          "end": 398,
          "name": "reserve",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:382-398):\nFunction name: reserve\n---------------------------------------------------------------------------------------------\n 382:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 383:            pub fn reserve(&mut self, additional: usize) {\n 384:                let old_cap = self.cap();\n 385:                let used_cap = self.len() + 1;\n 386:                let new_cap = new_capacity(old_cap, used_cap, additional);\n 387:        \n 388:                // *** This is the issue! new_cap is related to underlying buffer, capacity() is not.\n 389:                if new_cap > old_cap\n 390:                /* BUG self.capacity() */\n 391:                {\n 392:                    self.buf.reserve_exact(used_cap, new_cap - used_cap);\n 393:                    // new_cap <= self.cap, old_cap < new_cap => 2 * old_cap <= new_cap\n 394:                    unsafe {\n 395: error>                 self.handle_capacity_increase(old_cap);\n 396:                    }\n 397:                }\n 398:            }\n"
        },
        "unique_name": "reserve-L395-1"
      },
      "fix": {
        "certainty": false,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "guessing this is just because we haven't added enough refinements"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a9",
            "depth": 7,
            "origin": "(AssumeEnsures, Some(src/vec_deque.rs:395:17: 395:55 (#0)))"
          },
          {
            "name": "a6",
            "depth": 6,
            "origin": "No provenance"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/reserve-L395-1/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:563:13\n    |\n563 |             self.handle_capacity_increase(old_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:171:75\n    |\n171 |     #[flux::sig(fn (self: &strg VecDeque<T,A>[@s], old_capacity: usize{v: v * 2 <= s.cap && 1 <= v}) ensures self: VecDeque<T, A>)]\n    |                                                                           ^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a1 * 2 \u2264 a2.2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a5\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:559:23: 559:33 (#0)))\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))\"}]\n   --> src/vec_deque.rs:563:13\n    |\n563 |             self.handle_capacity_increase(old_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a5 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:559:23\n    |\n559 |         let new_cap = self.cap();\n    |                       ^^^^^^^^^^\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:556:23\n    |\n556 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 563,
        "col": 13,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:563:13\n    |\n563 |             self.handle_capacity_increase(old_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:171:75\n    |\n171 |     #[flux::sig(fn (self: &strg VecDeque<T,A>[@s], old_capacity: usize{v: v * 2 <= s.cap && 1 <= v}) ensures self: VecDeque<T, A>)]\n    |                                                                           ^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a1 * 2 \u2264 a2.2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a5\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:559:23: 559:33 (#0)))\"}, {\"name\": \"a0\", \"depth\": 0, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))\"}]\n   --> src/vec_deque.rs:563:13\n    |\n563 |             self.handle_capacity_increase(old_cap);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a5 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:559:23\n    |\n559 |         let new_cap = self.cap();\n    |                       ^^^^^^^^^^\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:556:23\n    |\n556 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\n\n",
        "predicate": "a1 * 2 \u2264 a2.2",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a5",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:559:23: 559:33 (#0)))"
          },
          {
            "name": "a0",
            "depth": 0,
            "origin": "No provenance"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "No provenance"
          },
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 551,
          "end": 566,
          "name": "grow",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:551-566):\nFunction name: grow\n---------------------------------------------------------------------------------------------\n 551:            // be called in cold paths.\n 552:            // This may panic or abort\n 553:            #[inline(never)]\n 554:            fn grow(&mut self) {\n 555:                // Extend or possibly remove this assertion when valid use-cases for growing the\n 556:                // buffer without it being full emerge\n 557:                debug_assert!(self.is_full());\n 558:                let old_cap = self.cap();\n 559:                self.buf.reserve_exact(old_cap, old_cap);\n 560:                let _ = lem_power_two(old_cap);\n 561:                let new_cap = self.cap();\n 562:                // TODO: Uncomment\n 563: error>         // assert(new_cap == old_cap * 2);\n 564:                unsafe {\n 565:                    self.handle_capacity_increase(old_cap);\n 566:                }\n"
        },
        "unique_name": "grow-L563-0"
      },
      "fix": {
        "certainty": false,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "new_cap needs to be >= old_cap*2. Maybe uncomment assert?"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a5",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:559:23: 559:33 (#0)))"
          },
          {
            "name": "a0",
            "depth": 0,
            "origin": "No provenance"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "No provenance"
          },
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/grow-L563-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:73:35\n    |\n73  |     #[flux::field({ usize[tail] | tail < cap })]\n    |                                   ^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"0 < a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"capacity\\\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))\"}]\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"capacity\"))`\n   --> src/vec_deque.rs:279:25\n    |\n279 |     fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n    |                         ^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:284:19\n    |\n284 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 286,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:73:35\n    |\n73  |     #[flux::field({ usize[tail] | tail < cap })]\n    |                                   ^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"0 < a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"capacity\\\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))\"}]\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"capacity\"))`\n   --> src/vec_deque.rs:279:25\n    |\n279 |     fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n    |                         ^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:284:19\n    |\n284 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "0 < a2",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"capacity\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 278,
          "end": 291,
          "name": "with_capacity_in",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:278-291):\nFunction name: with_capacity_in\n---------------------------------------------------------------------------------------------\n 278:            //#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n 279:            fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n 280:                // FLUX-TODO: same as MAXIMUM_ZST_CAPACITY?: assert!(capacity < 1_usize << usize::BITS - 1, \"capacity overflow\");\n 281:                // TODO: Uncomment\n 282:                // assert(capacity < MAXIMUM_ZST_CAPACITY);\n 283:                // +1 since the ringbuffer always leaves one space empty\n 284:                let cap = real_capacity(capacity);\n 285:        \n 286: error>         VecDeque {\n 287:                    tail: 0,\n 288:                    head: 0,\n 289:                    buf: RawVec::with_capacity_in(cap, alloc),\n 290:                }\n 291:            }\n"
        },
        "unique_name": "with_capacity_in-L286-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "real_capacity needs > 1"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"capacity\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/with_capacity_in-L286-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:415:9\n    |\n415 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a postcondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:413:56\n    |\n413 |     #[flux::sig(fn (&VecDeque<T,A>[@self]) -> usize{v: v < self.cap})]\n    |                                                        ^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a1 < self.2\"\n              blamed variable: \"Some(a1)\"\n              related variables: [{\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:415:9: 415:48 (#0)))\"}]\n   --> src/vec_deque.rs:415:9\n    |\n415 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:415:9\n    |\n415 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 415,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:415:9\n    |\n415 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a postcondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:413:56\n    |\n413 |     #[flux::sig(fn (&VecDeque<T,A>[@self]) -> usize{v: v < self.cap})]\n    |                                                        ^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a1 < self.2\"\n              blamed variable: \"Some(a1)\"\n              related variables: [{\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:415:9: 415:48 (#0)))\"}]\n   --> src/vec_deque.rs:415:9\n    |\n415 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:415:9\n    |\n415 |         count(self.tail, self.head, self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a1 < self.2",
        "blamed_variable": "Some(a1)",
        "related_variables": [
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:415:9: 415:48 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 413,
          "end": 416,
          "name": "len",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:413-416):\nFunction name: len\n---------------------------------------------------------------------------------------------\n 413:            #[flux::sig(fn (&VecDeque<T,A>[@self]) -> usize{v: v < self.cap})]\n 414:            pub fn len(&self) -> usize {\n 415: error>         count(self.tail, self.head, self.cap())\n 416:            }\n"
        },
        "unique_name": "len-L415-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "1a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "count needs output > self.cap"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:415:9: 415:48 (#0)))"
          }
        ],
        "anything_missing": true,
        "missing_info": "self.cap()'s output",
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/len-L415-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a postcondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:127:86\n    |\n127 |     #[flux::sig(fn (self: &VecDeque<T,A>[@s], idx: usize, addend: usize) -> usize{v: v < s.cap})]\n    |                                                                                      ^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a4 < s.2\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:129:9: 129:57 (#0)))\"}]\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 129,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a postcondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:127:86\n    |\n127 |     #[flux::sig(fn (self: &VecDeque<T,A>[@s], idx: usize, addend: usize) -> usize{v: v < s.cap})]\n    |                                                                                      ^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a4 < s.2\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:129:9: 129:57 (#0)))\"}]\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "a4 < s.2",
        "blamed_variable": "Some(a4)",
        "related_variables": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:129:9: 129:57 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 127,
          "end": 130,
          "name": "wrap_add",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:127-130):\nFunction name: wrap_add\n---------------------------------------------------------------------------------------------\n 127:            #[flux::sig(fn (self: &VecDeque<T,A>[@s], idx: usize, addend: usize) -> usize{v: v < s.cap})]\n 128:            fn wrap_add(&self, idx: usize, addend: usize) -> usize {\n 129: error>         wrap_index(idx.wrapping_add(addend), self.cap())\n 130:            }\n"
        },
        "unique_name": "wrap_add-L129-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "1a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "wrap_index needs > cap"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:129:9: 129:57 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/wrap_add-L129-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:77:45\n    |\n77  |     #[flux::field({ RawVec<T, A>[cap] | pow2(cap) && 1 <= cap } )]\n    |                                             ^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"pow2(a2)\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"capacity\\\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))\"}]\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"capacity\"))`\n   --> src/vec_deque.rs:279:25\n    |\n279 |     fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n    |                         ^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:284:19\n    |\n284 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 286,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:77:45\n    |\n77  |     #[flux::field({ RawVec<T, A>[cap] | pow2(cap) && 1 <= cap } )]\n    |                                             ^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"pow2(a2)\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"capacity\\\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))\"}]\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"capacity\"))`\n   --> src/vec_deque.rs:279:25\n    |\n279 |     fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n    |                         ^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:284:19\n    |\n284 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "predicate": "pow2(a2)",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"capacity\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 278,
          "end": 291,
          "name": "with_capacity_in",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:278-291):\nFunction name: with_capacity_in\n---------------------------------------------------------------------------------------------\n 278:            //#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n 279:            fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n 280:                // FLUX-TODO: same as MAXIMUM_ZST_CAPACITY?: assert!(capacity < 1_usize << usize::BITS - 1, \"capacity overflow\");\n 281:                // TODO: Uncomment\n 282:                // assert(capacity < MAXIMUM_ZST_CAPACITY);\n 283:                // +1 since the ringbuffer always leaves one space empty\n 284:                let cap = real_capacity(capacity);\n 285:        \n 286: error>         VecDeque {\n 287:                    tail: 0,\n 288:                    head: 0,\n 289:                    buf: RawVec::with_capacity_in(cap, alloc),\n 290:                }\n 291:            }\n"
        },
        "unique_name": "with_capacity_in-L286-2"
      },
      "fix": {
        "certainty": true,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "real_capacity needs pow2"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"capacity\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/with_capacity_in-L286-2/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:192:31\n    |\n192 |         } else if self.head < old_capacity - self.tail {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a0 - s.1 \u2265 0\"\n              blamed variable: \"Some(a0)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:172:51: 172:63 (#0)))\"}]\n   --> src/vec_deque.rs:192:31\n    |\n192 |         } else if self.head < old_capacity - self.tail {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:172:51\n    |\n172 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 192,
        "col": 31,
        "raw1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:192:31\n    |\n192 |         } else if self.head < old_capacity - self.tail {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a0 - s.1 \u2265 0\"\n              blamed variable: \"Some(a0)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"old_capacity\\\")), Some(src/vec_deque.rs:172:51: 172:63 (#0)))\"}]\n   --> src/vec_deque.rs:192:31\n    |\n192 |         } else if self.head < old_capacity - self.tail {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"old_capacity\"))`\n   --> src/vec_deque.rs:172:51\n    |\n172 |     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n    |                                                   ^^^^^^^^^^^^\n\n",
        "predicate": "a0 - s.1 \u2265 0",
        "blamed_variable": "Some(a0)",
        "related_variables": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:172:51: 172:63 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 171,
          "end": 217,
          "name": "handle_capacity_increase",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:171-217):\nFunction name: handle_capacity_increase\n---------------------------------------------------------------------------------------------\n 171:            #[flux::sig(fn (self: &strg VecDeque<T,A>[@s], old_capacity: usize{v: v * 2 <= s.cap && 1 <= v}) ensures self: VecDeque<T, A>)]\n 172:            unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n 173:                let new_capacity = self.cap();\n 174:        \n 175:                // Move the shortest contiguous section of the ring buffer\n 176:                //    T             H\n 177:                //   [o o o o o o o . ]\n 178:                //    T             H\n 179:                // A [o o o o o o o . . . . . . . . . ]\n 180:                //        H T\n 181:                //   [o o . o o o o o ]\n 182:                //          T             H\n 183:                // B [. . . o o o o o o o . . . . . . ]\n 184:                //              H T\n 185:                //   [o o o o o . o o ]\n 186:                //              H                 T\n 187:                // C [o o o o o . . . . . . . . . o o ]\n 188:        \n 189:                if self.tail <= self.head {\n 190:                    // A\n 191:                    // Nop\n 192: error>         } else if self.head < old_capacity - self.tail {\n 193:                    // B\n 194:                    unsafe {\n 195:                        let head = self.head;\n 196:                        self.copy_nonoverlapping(old_capacity, 0, head); // FLUX-PANIC: self.head -> head\n 197:                    }\n 198:                    self.head += old_capacity;\n 199:                    debug_assert!(self.head > self.tail);\n 200:                } else {\n 201:                    // C\n 202:                    let new_tail = new_capacity - (old_capacity - self.tail);\n 203:                    {\n 204:                        let tail = self.tail;\n 205:                        self.copy_nonoverlapping(new_tail, tail, old_capacity - tail); // FLUX-PANIC: self.tail -> tail\n 206:                    }\n 207:                    self.tail = new_tail;\n 208:                    debug_assert!(self.head < self.tail);\n 209:                }\n 210:                // TODO: Uncomment\n 211:                // // FLUX debug_assert!(self.head < self.cap());\n 212:                // assert(self.head < self.cap());\n 213:                // // FLUX debug_assert!(self.tail < self.cap());\n 214:                // assert(self.tail < self.cap());\n 215:                // // FLUX debug_assert!(self.cap().count_ones() == 1);\n 216:                // assert(is_power_of_two(self.cap()));\n 217:            }\n"
        },
        "unique_name": "handle_capacity_increase-L192-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2b",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "old_capacity needs > self.tail"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"old_capacity\")), Some(src/vec_deque.rs:172:51: 172:63 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/handle_capacity_increase-L192-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:75:35\n    |\n75  |     #[flux::field({ usize[head] | head < cap })]\n    |                                   ^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"0 < a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"capacity\\\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))\"}]\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"capacity\"))`\n   --> src/vec_deque.rs:279:25\n    |\n279 |     fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n    |                         ^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:284:19\n    |\n284 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 286,
        "col": 9,
        "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:75:35\n    |\n75  |     #[flux::field({ usize[head] | head < cap })]\n    |                                   ^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"0 < a2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"(FnArg(Some(\\\"capacity\\\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))\"}]\n   --> src/vec_deque.rs:286:9\n    |\n286 | /         VecDeque {\n287 | |             tail: 0,\n288 | |             head: 0,\n289 | |             buf: RawVec::with_capacity_in(cap, alloc),\n290 | |         }\n    | |_________^\n    |\nnote: related variable `a0 (depth 0)` defined here with originator `FnArg(Some(\"capacity\"))`\n   --> src/vec_deque.rs:279:25\n    |\n279 |     fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n    |                         ^^^^^^^^\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:284:19\n    |\n284 |         let cap = real_capacity(capacity);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`\n\n",
        "predicate": "0 < a2",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"capacity\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 278,
          "end": 291,
          "name": "with_capacity_in",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:278-291):\nFunction name: with_capacity_in\n---------------------------------------------------------------------------------------------\n 278:            //#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n 279:            fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n 280:                // FLUX-TODO: same as MAXIMUM_ZST_CAPACITY?: assert!(capacity < 1_usize << usize::BITS - 1, \"capacity overflow\");\n 281:                // TODO: Uncomment\n 282:                // assert(capacity < MAXIMUM_ZST_CAPACITY);\n 283:                // +1 since the ringbuffer always leaves one space empty\n 284:                let cap = real_capacity(capacity);\n 285:        \n 286: error>         VecDeque {\n 287:                    tail: 0,\n 288:                    head: 0,\n 289:                    buf: RawVec::with_capacity_in(cap, alloc),\n 290:                }\n 291:            }\n"
        },
        "unique_name": "with_capacity_in-L286-1"
      },
      "fix": {
        "certainty": true,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "real_capacity needs > 1"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "(FnArg(Some(\"capacity\")), Some(src/vec_deque.rs:279:25: 279:33 (#0)))"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:284:19: 284:42 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/with_capacity_in-L286-1/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:392:46\n    |\n392 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |                                              ^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a5 - a4 + 1 \u2265 0\"\n              blamed variable: \"Some(a5)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:384:23: 384:33 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a5\", \"depth\": 5, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:386:23: 386:66 (#0)))\"}, {\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:385:24: 385:34 (#0)))\"}]\n   --> src/vec_deque.rs:392:46\n    |\n392 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |                                              ^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:384:23\n    |\n384 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\nnote: related variable `a5 (depth 5)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:386:23\n    |\n386 |         let new_cap = new_capacity(old_cap, used_cap, additional);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:385:24\n    |\n385 |         let used_cap = self.len() + 1;\n    |                        ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 392,
        "col": 46,
        "raw1": "error[E0999]: arithmetic operation may overflow\n   --> src/vec_deque.rs:392:46\n    |\n392 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |                                              ^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a5 - a4 + 1 \u2265 0\"\n              blamed variable: \"Some(a5)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:384:23: 384:33 (#0)))\"}, {\"name\": \"a3\", \"depth\": 3, \"origin\": \"No provenance\"}, {\"name\": \"a5\", \"depth\": 5, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:386:23: 386:66 (#0)))\"}, {\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:385:24: 385:34 (#0)))\"}]\n   --> src/vec_deque.rs:392:46\n    |\n392 |             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n    |                                              ^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a2 (depth 2)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:384:23\n    |\n384 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\nnote: related variable `a5 (depth 5)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:386:23\n    |\n386 |         let new_cap = new_capacity(old_cap, used_cap, additional);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:385:24\n    |\n385 |         let used_cap = self.len() + 1;\n    |                        ^^^^^^^^^^\n\n",
        "predicate": "a5 - a4 + 1 \u2265 0",
        "blamed_variable": "Some(a5)",
        "related_variables": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:384:23: 384:33 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          },
          {
            "name": "a5",
            "depth": 5,
            "origin": "(CallReturn, Some(src/vec_deque.rs:386:23: 386:66 (#0)))"
          },
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:385:24: 385:34 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 382,
          "end": 398,
          "name": "reserve",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:382-398):\nFunction name: reserve\n---------------------------------------------------------------------------------------------\n 382:            //#[stable(feature = \"rust1\", since = \"1.0.0\")]\n 383:            pub fn reserve(&mut self, additional: usize) {\n 384:                let old_cap = self.cap();\n 385:                let used_cap = self.len() + 1;\n 386:                let new_cap = new_capacity(old_cap, used_cap, additional);\n 387:        \n 388:                // *** This is the issue! new_cap is related to underlying buffer, capacity() is not.\n 389:                if new_cap > old_cap\n 390:                /* BUG self.capacity() */\n 391:                {\n 392: error>             self.buf.reserve_exact(used_cap, new_cap - used_cap);\n 393:                    // new_cap <= self.cap, old_cap < new_cap => 2 * old_cap <= new_cap\n 394:                    unsafe {\n 395:                        self.handle_capacity_increase(old_cap);\n 396:                    }\n 397:                }\n 398:            }\n"
        },
        "unique_name": "reserve-L392-0"
      },
      "fix": {
        "certainty": false,
        "err_type": "2a",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "new_capacity probably needs refinement (we'll assume len and cap are right)"
        },
        "seen_before": false,
        "blamed_variable_correct": true,
        "variables_to_change": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "(CallReturn, Some(src/vec_deque.rs:384:23: 384:33 (#0)))"
          },
          {
            "name": "a3",
            "depth": 3,
            "origin": "No provenance"
          },
          {
            "name": "a5",
            "depth": 5,
            "origin": "(CallReturn, Some(src/vec_deque.rs:386:23: 386:66 (#0)))"
          },
          {
            "name": "a4",
            "depth": 4,
            "origin": "(CallReturn, Some(src/vec_deque.rs:385:24: 385:34 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/reserve-L392-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:557:9\n    |\n557 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a1 + a1 = a2.2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))\"}]\n   --> src/vec_deque.rs:557:9\n    |\n557 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:556:23\n    |\n556 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 557,
        "col": 9,
        "raw1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:557:9\n    |\n557 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a1 + a1 = a2.2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))\"}]\n   --> src/vec_deque.rs:557:9\n    |\n557 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:556:23\n    |\n556 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\n\n",
        "predicate": "a1 + a1 = a2.2",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "No provenance"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "No provenance"
          },
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 551,
          "end": 566,
          "name": "grow",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:551-566):\nFunction name: grow\n---------------------------------------------------------------------------------------------\n 551:            // be called in cold paths.\n 552:            // This may panic or abort\n 553:            #[inline(never)]\n 554:            fn grow(&mut self) {\n 555:                // Extend or possibly remove this assertion when valid use-cases for growing the\n 556:                // buffer without it being full emerge\n 557: error>         debug_assert!(self.is_full());\n 558:                let old_cap = self.cap();\n 559:                self.buf.reserve_exact(old_cap, old_cap);\n 560:                let _ = lem_power_two(old_cap);\n 561:                let new_cap = self.cap();\n 562:                // TODO: Uncomment\n 563:                // assert(new_cap == old_cap * 2);\n 564:                unsafe {\n 565:                    self.handle_capacity_increase(old_cap);\n 566:                }\n"
        },
        "unique_name": "grow-L557-0"
      },
      "fix": {
        "certainty": true,
        "err_type": "2b",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "needs ensures vecdeque"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a0",
            "depth": 0,
            "origin": "No provenance"
          },
          {
            "name": "a2",
            "depth": 2,
            "origin": "No provenance"
          },
          {
            "name": "a1",
            "depth": 1,
            "origin": "(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/grow-L557-0/error_and_fix.json"
    },
    {
      "error": {
        "message1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:189:9\n    |\n189 | /         if self.tail <= self.head {\n190 | |             // A\n191 | |             // Nop\n192 | |         } else if self.head < old_capacity - self.tail {\n...   |\n208 | |             debug_assert!(self.head < self.tail);\n209 | |         }\n    | |_________^\n\n",
        "message2": "error[E0999]: failed to verify predicate: \"a2 < s.2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:189:9\n    |\n189 | /         if self.tail <= self.head {\n190 | |             // A\n191 | |             // Nop\n192 | |         } else if self.head < old_capacity - self.tail {\n...   |\n208 | |             debug_assert!(self.head < self.tail);\n209 | |         }\n    | |_________^\n\n",
        "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
        "row": 189,
        "col": 9,
        "raw1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:189:9\n    |\n189 | /         if self.tail <= self.head {\n190 | |             // A\n191 | |             // Nop\n192 | |         } else if self.head < old_capacity - self.tail {\n...   |\n208 | |             debug_assert!(self.head < self.tail);\n209 | |         }\n    | |_________^\n\n",
        "raw2": "error[E0999]: failed to verify predicate: \"a2 < s.2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}]\n   --> src/vec_deque.rs:189:9\n    |\n189 | /         if self.tail <= self.head {\n190 | |             // A\n191 | |             // Nop\n192 | |         } else if self.head < old_capacity - self.tail {\n...   |\n208 | |             debug_assert!(self.head < self.tail);\n209 | |         }\n    | |_________^\n\n",
        "predicate": "a2 < s.2",
        "blamed_variable": "Some(a2)",
        "related_variables": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "No provenance"
          }
        ],
        "parsing_error": null,
        "function_context": {
          "start": 171,
          "end": 217,
          "name": "handle_capacity_increase",
          "constraint_files": [],
          "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:171-217):\nFunction name: handle_capacity_increase\n---------------------------------------------------------------------------------------------\n 171:            #[flux::sig(fn (self: &strg VecDeque<T,A>[@s], old_capacity: usize{v: v * 2 <= s.cap && 1 <= v}) ensures self: VecDeque<T, A>)]\n 172:            unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {\n 173:                let new_capacity = self.cap();\n 174:        \n 175:                // Move the shortest contiguous section of the ring buffer\n 176:                //    T             H\n 177:                //   [o o o o o o o . ]\n 178:                //    T             H\n 179:                // A [o o o o o o o . . . . . . . . . ]\n 180:                //        H T\n 181:                //   [o o . o o o o o ]\n 182:                //          T             H\n 183:                // B [. . . o o o o o o o . . . . . . ]\n 184:                //              H T\n 185:                //   [o o o o o . o o ]\n 186:                //              H                 T\n 187:                // C [o o o o o . . . . . . . . . o o ]\n 188:        \n 189: error>         if self.tail <= self.head {\n 190:                    // A\n 191:                    // Nop\n 192:                } else if self.head < old_capacity - self.tail {\n 193:                    // B\n 194:                    unsafe {\n 195:                        let head = self.head;\n 196:                        self.copy_nonoverlapping(old_capacity, 0, head); // FLUX-PANIC: self.head -> head\n 197:                    }\n 198:                    self.head += old_capacity;\n 199:                    debug_assert!(self.head > self.tail);\n 200:                } else {\n 201:                    // C\n 202:                    let new_tail = new_capacity - (old_capacity - self.tail);\n 203:                    {\n 204:                        let tail = self.tail;\n 205:                        self.copy_nonoverlapping(new_tail, tail, old_capacity - tail); // FLUX-PANIC: self.tail -> tail\n 206:                    }\n 207:                    self.tail = new_tail;\n 208:                    debug_assert!(self.head < self.tail);\n 209:                }\n 210:                // TODO: Uncomment\n 211:                // // FLUX debug_assert!(self.head < self.cap());\n 212:                // assert(self.head < self.cap());\n 213:                // // FLUX debug_assert!(self.tail < self.cap());\n 214:                // assert(self.tail < self.cap());\n 215:                // // FLUX debug_assert!(self.cap().count_ones() == 1);\n 216:                // assert(is_power_of_two(self.cap()));\n 217:            }\n"
        },
        "unique_name": "handle_capacity_increase-L189-0"
      },
      "fix": {
        "certainty": false,
        "err_type": "1b",
        "fix_description": {
          "fix_type": "additional_refinement",
          "description": "I'm guessing this is because of something to do with old_capacity?"
        },
        "seen_before": false,
        "blamed_variable_correct": false,
        "variables_to_change": [
          {
            "name": "a2",
            "depth": 2,
            "origin": "No provenance"
          }
        ],
        "anything_missing": false,
        "missing_info": null,
        "additional_notes": null
      },
      "summary_source_path": "7d90dc6/handle_capacity_increase-L189-0/error_and_fix.json"
    }
  ]
}
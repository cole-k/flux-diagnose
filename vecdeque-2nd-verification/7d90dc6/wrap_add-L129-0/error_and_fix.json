{
  "error": {
    "message1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a postcondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:127:86\n    |\n127 |     #[flux::sig(fn (self: &VecDeque<T,A>[@s], idx: usize, addend: usize) -> usize{v: v < s.cap})]\n    |                                                                                      ^^^^^^^^^\n\n",
    "message2": "error[E0999]: failed to verify predicate: \"a4 < s.2\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:129:9: 129:57 (#0)))\"}]\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
    "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
    "row": 129,
    "col": 9,
    "raw1": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a postcondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:127:86\n    |\n127 |     #[flux::sig(fn (self: &VecDeque<T,A>[@s], idx: usize, addend: usize) -> usize{v: v < s.cap})]\n    |                                                                                      ^^^^^^^^^\n\n",
    "raw2": "error[E0999]: failed to verify predicate: \"a4 < s.2\"\n              blamed variable: \"Some(a4)\"\n              related variables: [{\"name\": \"a4\", \"depth\": 4, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:129:9: 129:57 (#0)))\"}]\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a4 (depth 4)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:129:9\n    |\n129 |         wrap_index(idx.wrapping_add(addend), self.cap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
    "predicate": "a4 < s.2",
    "blamed_variable": "Some(a4)",
    "related_variables": [
      {
        "name": "a4",
        "depth": 4,
        "origin": "(CallReturn, Some(src/vec_deque.rs:129:9: 129:57 (#0)))"
      }
    ],
    "parsing_error": null,
    "function_context": {
      "start": 127,
      "end": 130,
      "name": "wrap_add",
      "constraint_files": [],
      "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:127-130):\nFunction name: wrap_add\n---------------------------------------------------------------------------------------------\n 127:            #[flux::sig(fn (self: &VecDeque<T,A>[@s], idx: usize, addend: usize) -> usize{v: v < s.cap})]\n 128:            fn wrap_add(&self, idx: usize, addend: usize) -> usize {\n 129: error>         wrap_index(idx.wrapping_add(addend), self.cap())\n 130:            }\n"
    },
    "unique_name": "wrap_add-L129-0"
  },
  "fix": {
    "certainty": true,
    "err_type": "1a",
    "fix_description": {
      "fix_type": "additional_refinement",
      "description": "wrap_index needs > cap"
    },
    "seen_before": false,
    "blamed_variable_correct": true,
    "variables_to_change": [
      {
        "name": "a4",
        "depth": 4,
        "origin": "(CallReturn, Some(src/vec_deque.rs:129:9: 129:57 (#0)))"
      }
    ],
    "anything_missing": false,
    "missing_info": null,
    "additional_notes": null
  }
}
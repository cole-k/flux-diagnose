{
  "error": {
    "message1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:557:9\n    |\n557 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
    "message2": "error[E0999]: failed to verify predicate: \"a1 + a1 = a2.2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))\"}]\n   --> src/vec_deque.rs:557:9\n    |\n557 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:556:23\n    |\n556 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\n\n",
    "file": "/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs",
    "row": 557,
    "col": 9,
    "raw1": "error[E0999]: type invariant may not hold (when place is folded)\n   --> src/vec_deque.rs:557:9\n    |\n557 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
    "raw2": "error[E0999]: failed to verify predicate: \"a1 + a1 = a2.2\"\n              blamed variable: \"Some(a2)\"\n              related variables: [{\"name\": \"a0\", \"depth\": 0, \"origin\": \"No provenance\"}, {\"name\": \"a2\", \"depth\": 2, \"origin\": \"No provenance\"}, {\"name\": \"a1\", \"depth\": 1, \"origin\": \"(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))\"}]\n   --> src/vec_deque.rs:557:9\n    |\n557 |         self.buf.reserve_exact(old_cap, old_cap);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: related variable `a1 (depth 1)` defined here with originator `CallReturn`\n   --> src/vec_deque.rs:556:23\n    |\n556 |         let old_cap = self.cap();\n    |                       ^^^^^^^^^^\n\n",
    "predicate": "a1 + a1 = a2.2",
    "blamed_variable": "Some(a2)",
    "related_variables": [
      {
        "name": "a0",
        "depth": 0,
        "origin": "No provenance"
      },
      {
        "name": "a2",
        "depth": 2,
        "origin": "No provenance"
      },
      {
        "name": "a1",
        "depth": 1,
        "origin": "(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))"
      }
    ],
    "parsing_error": null,
    "function_context": {
      "start": 551,
      "end": 566,
      "name": "grow",
      "constraint_files": [],
      "rendered_context": "\nFunction context (/home/cole/research/flux-examples/kani-vecdeque/src/vec_deque.rs:551-566):\nFunction name: grow\n---------------------------------------------------------------------------------------------\n 551:            // be called in cold paths.\n 552:            // This may panic or abort\n 553:            #[inline(never)]\n 554:            fn grow(&mut self) {\n 555:                // Extend or possibly remove this assertion when valid use-cases for growing the\n 556:                // buffer without it being full emerge\n 557: error>         debug_assert!(self.is_full());\n 558:                let old_cap = self.cap();\n 559:                self.buf.reserve_exact(old_cap, old_cap);\n 560:                let _ = lem_power_two(old_cap);\n 561:                let new_cap = self.cap();\n 562:                // TODO: Uncomment\n 563:                // assert(new_cap == old_cap * 2);\n 564:                unsafe {\n 565:                    self.handle_capacity_increase(old_cap);\n 566:                }\n"
    },
    "unique_name": "grow-L557-0"
  },
  "fix": {
    "certainty": true,
    "err_type": "2b",
    "fix_description": {
      "fix_type": "additional_refinement",
      "description": "needs ensures vecdeque"
    },
    "seen_before": false,
    "blamed_variable_correct": false,
    "variables_to_change": [
      {
        "name": "a0",
        "depth": 0,
        "origin": "No provenance"
      },
      {
        "name": "a2",
        "depth": 2,
        "origin": "No provenance"
      },
      {
        "name": "a1",
        "depth": 1,
        "origin": "(CallReturn, Some(src/vec_deque.rs:556:23: 556:33 (#0)))"
      }
    ],
    "anything_missing": false,
    "missing_info": null,
    "additional_notes": null
  }
}